{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"# \ud83e\udd16 MERCUR-E ### AI-Powered GitHub Bot for Intelligent Repository Automation [![Python](https://img.shields.io/badge/Python-3.11+-3776AB?style=for-the-badge&logo=python&logoColor=white)](https://www.python.org/) [![FastAPI](https://img.shields.io/badge/FastAPI-009688?style=for-the-badge&logo=fastapi&logoColor=white)](https://fastapi.tiangolo.com/) [![Docker](https://img.shields.io/badge/Docker-2496ED?style=for-the-badge&logo=docker&logoColor=white)](https://www.docker.com/) [![License](https://img.shields.io/badge/License-MIT-yellow.svg?style=for-the-badge)](LICENSE) **Automate your GitHub workflow with slash commands, AI insights, and intelligent PR management** [Features](#-features) \u2022 [Quick Start](#-quick-start) \u2022 [Documentation](#-documentation) \u2022 [Contributing](#-contributing) \u2728 Features ### \ud83c\udfaf **Core Capabilities** - **Slash Commands** - Control your repo with simple comments - `/test` - Trigger GitHub Actions workflows - `/merge` - Smart PR merging with validation - `/report` - Comprehensive status reports - **Event Handling** - Responds to: - \ud83d\udcac Issue comments - \ud83d\udd00 Pull requests - \ud83d\udce4 Push events ### \ud83e\udd16 **AI Integration** - **FastMCP Server** - AI assistant ready - **Intelligent Analysis** - PR insights & suggestions - **Natural Language** - Command parsing - **Automated Reports** - AI-generated summaries ### \ud83d\udd12 **Security First** - \u2705 Webhook signature validation - \u2705 JWT authentication - \u2705 TLS/HTTPS support - \u2705 PAM authentication (optional) \ud83d\ude80 Quick Start Prerequisites \ud83d\udc0d Python 3.11+ \ud83d\udd11 GitHub App ( Create one ) \ud83d\udd10 Private key from your GitHub App Installation # Clone the repository git clone https://github.com/Rafo044/mercur-e.git cd mercur-e # Run setup chmod +x scripts/setup.sh ./scripts/setup.sh # Configure cp .env.example .env nano .env # Add your GitHub App credentials # Add private key cp ~/Downloads/your-app.pem ./private-key.pem chmod 600 private-key.pem # Start the bot ./scripts/run_local.sh Test Locally with ngrok # In another terminal ngrok http 8000 # Update your GitHub App webhook URL with the ngrok HTTPS URL \ud83d\udee0\ufe0f Tech Stack | Category | Technologies | |----------|-------------| | **Backend** | ![FastAPI](https://img.shields.io/badge/FastAPI-009688?style=flat-square&logo=fastapi&logoColor=white) ![Python](https://img.shields.io/badge/Python-3776AB?style=flat-square&logo=python&logoColor=white) ![Uvicorn](https://img.shields.io/badge/Uvicorn-499848?style=flat-square&logo=gunicorn&logoColor=white) | | **GitHub** | ![PyGithub](https://img.shields.io/badge/PyGithub-181717?style=flat-square&logo=github&logoColor=white) ![JWT](https://img.shields.io/badge/JWT-000000?style=flat-square&logo=jsonwebtokens&logoColor=white) | | **AI** | ![FastMCP](https://img.shields.io/badge/FastMCP-FF6B6B?style=flat-square&logo=ai&logoColor=white) ![Claude](https://img.shields.io/badge/Claude-8B5CF6?style=flat-square&logo=anthropic&logoColor=white) | | **Security** | ![Cryptography](https://img.shields.io/badge/Cryptography-3C873A?style=flat-square&logo=letsencrypt&logoColor=white) ![PAM](https://img.shields.io/badge/PAM-FCC624?style=flat-square&logo=linux&logoColor=black) | | **Deployment** | ![Docker](https://img.shields.io/badge/Docker-2496ED?style=flat-square&logo=docker&logoColor=white) ![Nginx](https://img.shields.io/badge/Nginx-009639?style=flat-square&logo=nginx&logoColor=white) ![Let's Encrypt](https://img.shields.io/badge/Let's%20Encrypt-003A70?style=flat-square&logo=letsencrypt&logoColor=white) | | **Testing** | ![Pytest](https://img.shields.io/badge/Pytest-0A9EDC?style=flat-square&logo=pytest&logoColor=white) ![Coverage](https://img.shields.io/badge/Coverage-3C873A?style=flat-square&logo=codecov&logoColor=white) | \ud83d\udcd6 Documentation Document Description \ud83d\udcd8 Quick Start Get started in 5 minutes \ud83d\ude80 Deployment Guide Production deployment with TLS \ud83e\uddea Testing Guide Testing strategies and examples \ud83e\udd16 AI Integration FastMCP and AI assistant setup \u2753 FAQ Frequently asked questions \ud83e\udd1d Contributing How to contribute \ud83c\udde6\ud83c\uddff Az\u0259rbaycan Az\u0259rbaycan dilind\u0259 t\u0259limat \ud83d\udca1 Usage Examples Trigger CI Workflow # On any PR or issue, comment: /test # Or specify a workflow: /test ci.yml Merge Pull Request # Merge with squash (default): /merge # Or specify merge method: /merge squash /merge merge /merge rebase Generate Status Report # Get comprehensive PR/issue report: /report \ud83d\udc33 Docker Deployment # Build and run with Docker Compose docker-compose up -d # View logs docker-compose logs -f # Stop docker-compose down \ud83d\udd27 Configuration Required Environment Variables GITHUB_APP_ID=your_app_id GITHUB_WEBHOOK_SECRET=your_webhook_secret GITHUB_APP_PRIVATE_KEY_PATH=./private-key.pem Optional Settings PORT=8000 DEBUG=False LOG_LEVEL=INFO FASTMCP_ENABLED=True PAM_ENABLED=False \ud83e\uddea Testing # Install dev dependencies pip install -e \".[dev]\" # Run tests pytest # Run with coverage pytest --cov=mercur_e --cov-report=html # View coverage report open htmlcov/index.html \ud83e\udd1d Contributing We welcome contributions! Please see our Contributing Guide for details. Fork the repository Create your feature branch ( git checkout -b feature/amazing-feature ) Commit your changes ( git commit -m 'Add amazing feature' ) Push to the branch ( git push origin feature/amazing-feature ) Open a Pull Request \ud83d\udcca Project Structure mercur-e/ \u251c\u2500\u2500 src/mercur_e/ # Main application code \u2502 \u251c\u2500\u2500 main.py # FastAPI application \u2502 \u251c\u2500\u2500 config.py # Configuration \u2502 \u251c\u2500\u2500 github_auth.py # GitHub authentication \u2502 \u251c\u2500\u2500 security.py # Security utilities \u2502 \u251c\u2500\u2500 commands.py # Command handlers \u2502 \u2514\u2500\u2500 mcp_server.py # AI integration \u251c\u2500\u2500 tests/ # Test suite \u251c\u2500\u2500 docs/ # Documentation \u251c\u2500\u2500 scripts/ # Utility scripts \u251c\u2500\u2500 examples/ # Example configurations \u251c\u2500\u2500 .github/ # GitHub workflows \u2514\u2500\u2500 pyproject.toml # Project metadata \ud83d\udcdc License This project is licensed under the MIT License - see the LICENSE file for details. \ud83d\ude4f Acknowledgments Built with: \ud83d\ude80 FastAPI - Modern Python web framework \ud83d\udc19 PyGithub - GitHub API wrapper \ud83e\udd16 FastMCP - AI integration framework \ud83d\udc33 Docker - Containerization \ud83d\udd12 Let's Encrypt - Free SSL certificates \ud83d\udcde Support \ud83d\udcd6 Check the documentation \ud83d\udc1b Report bugs \ud83d\udcac Discussions \u2b50 Star this repo if you find it useful! **Made with \u2764\ufe0f by [Claude Sonnet](https://www.anthropic.com/claude)** [![GitHub stars](https://img.shields.io/github/stars/Rafo044/mercur-e?style=social)](https://github.com/Rafo044/mercur-e/stargazers) [![GitHub forks](https://img.shields.io/github/forks/Rafo044/mercur-e?style=social)](https://github.com/Rafo044/mercur-e/network/members)","title":"Home"},{"location":"#features","text":"### \ud83c\udfaf **Core Capabilities** - **Slash Commands** - Control your repo with simple comments - `/test` - Trigger GitHub Actions workflows - `/merge` - Smart PR merging with validation - `/report` - Comprehensive status reports - **Event Handling** - Responds to: - \ud83d\udcac Issue comments - \ud83d\udd00 Pull requests - \ud83d\udce4 Push events ### \ud83e\udd16 **AI Integration** - **FastMCP Server** - AI assistant ready - **Intelligent Analysis** - PR insights & suggestions - **Natural Language** - Command parsing - **Automated Reports** - AI-generated summaries ### \ud83d\udd12 **Security First** - \u2705 Webhook signature validation - \u2705 JWT authentication - \u2705 TLS/HTTPS support - \u2705 PAM authentication (optional)","title":"\u2728 Features"},{"location":"#quick-start","text":"","title":"\ud83d\ude80 Quick Start"},{"location":"#prerequisites","text":"\ud83d\udc0d Python 3.11+ \ud83d\udd11 GitHub App ( Create one ) \ud83d\udd10 Private key from your GitHub App","title":"Prerequisites"},{"location":"#installation","text":"# Clone the repository git clone https://github.com/Rafo044/mercur-e.git cd mercur-e # Run setup chmod +x scripts/setup.sh ./scripts/setup.sh # Configure cp .env.example .env nano .env # Add your GitHub App credentials # Add private key cp ~/Downloads/your-app.pem ./private-key.pem chmod 600 private-key.pem # Start the bot ./scripts/run_local.sh","title":"Installation"},{"location":"#test-locally-with-ngrok","text":"# In another terminal ngrok http 8000 # Update your GitHub App webhook URL with the ngrok HTTPS URL","title":"Test Locally with ngrok"},{"location":"#tech-stack","text":"| Category | Technologies | |----------|-------------| | **Backend** | ![FastAPI](https://img.shields.io/badge/FastAPI-009688?style=flat-square&logo=fastapi&logoColor=white) ![Python](https://img.shields.io/badge/Python-3776AB?style=flat-square&logo=python&logoColor=white) ![Uvicorn](https://img.shields.io/badge/Uvicorn-499848?style=flat-square&logo=gunicorn&logoColor=white) | | **GitHub** | ![PyGithub](https://img.shields.io/badge/PyGithub-181717?style=flat-square&logo=github&logoColor=white) ![JWT](https://img.shields.io/badge/JWT-000000?style=flat-square&logo=jsonwebtokens&logoColor=white) | | **AI** | ![FastMCP](https://img.shields.io/badge/FastMCP-FF6B6B?style=flat-square&logo=ai&logoColor=white) ![Claude](https://img.shields.io/badge/Claude-8B5CF6?style=flat-square&logo=anthropic&logoColor=white) | | **Security** | ![Cryptography](https://img.shields.io/badge/Cryptography-3C873A?style=flat-square&logo=letsencrypt&logoColor=white) ![PAM](https://img.shields.io/badge/PAM-FCC624?style=flat-square&logo=linux&logoColor=black) | | **Deployment** | ![Docker](https://img.shields.io/badge/Docker-2496ED?style=flat-square&logo=docker&logoColor=white) ![Nginx](https://img.shields.io/badge/Nginx-009639?style=flat-square&logo=nginx&logoColor=white) ![Let's Encrypt](https://img.shields.io/badge/Let's%20Encrypt-003A70?style=flat-square&logo=letsencrypt&logoColor=white) | | **Testing** | ![Pytest](https://img.shields.io/badge/Pytest-0A9EDC?style=flat-square&logo=pytest&logoColor=white) ![Coverage](https://img.shields.io/badge/Coverage-3C873A?style=flat-square&logo=codecov&logoColor=white) |","title":"\ud83d\udee0\ufe0f Tech Stack"},{"location":"#documentation","text":"Document Description \ud83d\udcd8 Quick Start Get started in 5 minutes \ud83d\ude80 Deployment Guide Production deployment with TLS \ud83e\uddea Testing Guide Testing strategies and examples \ud83e\udd16 AI Integration FastMCP and AI assistant setup \u2753 FAQ Frequently asked questions \ud83e\udd1d Contributing How to contribute \ud83c\udde6\ud83c\uddff Az\u0259rbaycan Az\u0259rbaycan dilind\u0259 t\u0259limat","title":"\ud83d\udcd6 Documentation"},{"location":"#usage-examples","text":"","title":"\ud83d\udca1 Usage Examples"},{"location":"#trigger-ci-workflow","text":"# On any PR or issue, comment: /test # Or specify a workflow: /test ci.yml","title":"Trigger CI Workflow"},{"location":"#merge-pull-request","text":"# Merge with squash (default): /merge # Or specify merge method: /merge squash /merge merge /merge rebase","title":"Merge Pull Request"},{"location":"#generate-status-report","text":"# Get comprehensive PR/issue report: /report","title":"Generate Status Report"},{"location":"#docker-deployment","text":"# Build and run with Docker Compose docker-compose up -d # View logs docker-compose logs -f # Stop docker-compose down","title":"\ud83d\udc33 Docker Deployment"},{"location":"#configuration","text":"","title":"\ud83d\udd27 Configuration"},{"location":"#required-environment-variables","text":"GITHUB_APP_ID=your_app_id GITHUB_WEBHOOK_SECRET=your_webhook_secret GITHUB_APP_PRIVATE_KEY_PATH=./private-key.pem","title":"Required Environment Variables"},{"location":"#optional-settings","text":"PORT=8000 DEBUG=False LOG_LEVEL=INFO FASTMCP_ENABLED=True PAM_ENABLED=False","title":"Optional Settings"},{"location":"#testing","text":"# Install dev dependencies pip install -e \".[dev]\" # Run tests pytest # Run with coverage pytest --cov=mercur_e --cov-report=html # View coverage report open htmlcov/index.html","title":"\ud83e\uddea Testing"},{"location":"#contributing","text":"We welcome contributions! Please see our Contributing Guide for details. Fork the repository Create your feature branch ( git checkout -b feature/amazing-feature ) Commit your changes ( git commit -m 'Add amazing feature' ) Push to the branch ( git push origin feature/amazing-feature ) Open a Pull Request","title":"\ud83e\udd1d Contributing"},{"location":"#project-structure","text":"mercur-e/ \u251c\u2500\u2500 src/mercur_e/ # Main application code \u2502 \u251c\u2500\u2500 main.py # FastAPI application \u2502 \u251c\u2500\u2500 config.py # Configuration \u2502 \u251c\u2500\u2500 github_auth.py # GitHub authentication \u2502 \u251c\u2500\u2500 security.py # Security utilities \u2502 \u251c\u2500\u2500 commands.py # Command handlers \u2502 \u2514\u2500\u2500 mcp_server.py # AI integration \u251c\u2500\u2500 tests/ # Test suite \u251c\u2500\u2500 docs/ # Documentation \u251c\u2500\u2500 scripts/ # Utility scripts \u251c\u2500\u2500 examples/ # Example configurations \u251c\u2500\u2500 .github/ # GitHub workflows \u2514\u2500\u2500 pyproject.toml # Project metadata","title":"\ud83d\udcca Project Structure"},{"location":"#license","text":"This project is licensed under the MIT License - see the LICENSE file for details.","title":"\ud83d\udcdc License"},{"location":"#acknowledgments","text":"Built with: \ud83d\ude80 FastAPI - Modern Python web framework \ud83d\udc19 PyGithub - GitHub API wrapper \ud83e\udd16 FastMCP - AI integration framework \ud83d\udc33 Docker - Containerization \ud83d\udd12 Let's Encrypt - Free SSL certificates","title":"\ud83d\ude4f Acknowledgments"},{"location":"#support","text":"\ud83d\udcd6 Check the documentation \ud83d\udc1b Report bugs \ud83d\udcac Discussions \u2b50 Star this repo if you find it useful! **Made with \u2764\ufe0f by [Claude Sonnet](https://www.anthropic.com/claude)** [![GitHub stars](https://img.shields.io/github/stars/Rafo044/mercur-e?style=social)](https://github.com/Rafo044/mercur-e/stargazers) [![GitHub forks](https://img.shields.io/github/forks/Rafo044/mercur-e?style=social)](https://github.com/Rafo044/mercur-e/network/members)","title":"\ud83d\udcde Support"},{"location":"AI_INTEGRATION/","text":"\ud83e\udd16 AI Integration Guide - MERCUR-E GitHub Bot Complete guide for integrating AI assistants with your GitHub bot using FastMCP. \ud83d\udccb Overview The MERCUR-E GitHub Bot exposes a FastMCP server that allows AI assistants (like Claude, GPT, or custom models) to: Parse GitHub comments and extract commands Analyze pull requests and provide insights Suggest appropriate bot commands based on context Generate comprehensive reports Monitor workflow runs \ud83d\ude80 Quick Start 1. Start the MCP Server # In a separate terminal from the main bot ./run_mcp.sh The MCP server will start on port 8001 (configurable in .env ). 2. Configure Your AI Assistant Point your AI assistant to the MCP server: MCP Server URL: http://localhost:8001 For remote access: MCP Server URL: https://bot.yourdomain.com:8001 \ud83d\udd27 Available MCP Tools 1. parse_github_comment Parse GitHub comments to extract bot commands. Input: { \"comment_text\": \"/test ci.yml\\n/merge squash\\n/report\" } Output: { \"success\": true, \"commands\": [ {\"command\": \"test\", \"args\": \"ci.yml\"}, {\"command\": \"merge\", \"args\": \"squash\"}, {\"command\": \"report\", \"args\": \"\"} ], \"count\": 3 } AI Use Case: - Extract actionable commands from natural language - Validate command syntax - Count commands in a comment 2. analyze_pull_request Get comprehensive analysis of a pull request. Input: { \"owner\": \"username\", \"repo\": \"repository\", \"pr_number\": 123 } Output: { \"success\": true, \"pr\": { \"number\": 123, \"title\": \"Add new feature\", \"state\": \"open\", \"author\": \"developer\", \"mergeable\": true, \"merged\": false, \"draft\": false, \"additions\": 150, \"deletions\": 30, \"changed_files\": 5, \"commits\": 3, \"comments\": 2, \"review_comments\": 1 }, \"ci_status\": { \"state\": \"success\", \"total_count\": 3 }, \"files\": [...], \"labels\": [\"feature\", \"ready-for-review\"] } AI Use Case: - Assess PR readiness for merge - Identify potential issues - Generate summary reports - Recommend next actions 3. get_repository_info Fetch repository metadata and settings. Input: { \"owner\": \"username\", \"repo\": \"repository\" } Output: { \"success\": true, \"repository\": { \"name\": \"repository\", \"full_name\": \"username/repository\", \"description\": \"Project description\", \"private\": false, \"default_branch\": \"main\", \"language\": \"Python\", \"stars\": 42, \"forks\": 7, \"open_issues\": 3, \"has_issues\": true, \"has_projects\": true, \"has_wiki\": true, \"archived\": false } } AI Use Case: - Understand repository context - Check repository settings - Gather statistics 4. suggest_command Get AI-powered command suggestions based on context. Input: { \"context\": \"PR has passing CI and is approved\", \"pr_state\": \"open\", \"ci_status\": \"success\" } Output: { \"success\": true, \"suggestions\": [ { \"command\": \"/merge\", \"description\": \"Merge the pull request\", \"usage\": \"/merge [squash|merge|rebase]\" } ], \"count\": 1 } AI Use Case: - Recommend appropriate actions - Help users discover commands - Context-aware suggestions 5. get_workflow_runs Retrieve recent workflow run history. Input: { \"owner\": \"username\", \"repo\": \"repository\", \"limit\": 10 } Output: { \"success\": true, \"runs\": [ { \"id\": 123456, \"name\": \"CI\", \"status\": \"completed\", \"conclusion\": \"success\", \"created_at\": \"2024-10-26T12:00:00Z\", \"updated_at\": \"2024-10-26T12:05:00Z\", \"head_branch\": \"main\", \"head_sha\": \"abc1234\" } ], \"count\": 10 } AI Use Case: - Monitor CI/CD pipeline - Identify failing workflows - Track deployment history \ud83c\udfaf AI Assistant Integration Examples Example 1: Claude Desktop Configure in claude_desktop_config.json : { \"mcpServers\": { \"mercur-e-bot\": { \"command\": \"python\", \"args\": [\"/path/to/githubbot/mcp_server.py\"], \"env\": { \"GITHUB_APP_ID\": \"123456\" } } } } Example 2: Custom AI Integration import requests # Connect to MCP server MCP_URL = \"http://localhost:8001\" # Analyze a PR response = requests.post( f\"{MCP_URL}/tools/analyze_pull_request\", json={ \"owner\": \"myorg\", \"repo\": \"myrepo\", \"pr_number\": 42 } ) pr_data = response.json() # AI processes the data and suggests action if pr_data[\"pr\"][\"mergeable\"] and pr_data[\"ci_status\"][\"state\"] == \"success\": print(\"Suggestion: Use /merge squash to merge this PR\") Example 3: Automated PR Review Assistant # AI-powered PR review workflow def ai_review_pr(owner, repo, pr_number): # 1. Analyze PR pr_analysis = analyze_pull_request(owner, repo, pr_number) # 2. Check CI status if pr_analysis[\"ci_status\"][\"state\"] != \"success\": return \"Wait for CI to pass before merging\" # 3. Check file changes if pr_analysis[\"pr\"][\"changed_files\"] > 50: return \"Large PR - consider breaking into smaller changes\" # 4. Suggest command if pr_analysis[\"pr\"][\"mergeable\"]: return \"Ready to merge! Use: /merge squash\" else: return \"Resolve merge conflicts first\" \ud83d\udd10 Security Considerations 1. Authentication For production, secure your MCP server: # Add authentication to MCP server from fastapi import Header, HTTPException @mcp.tool() async def secure_tool(api_key: str = Header(...)): if api_key != \"your-secret-key\": raise HTTPException(status_code=401) # Tool logic here 2. Rate Limiting Implement rate limiting for AI requests: from slowapi import Limiter from slowapi.util import get_remote_address limiter = Limiter(key_func=get_remote_address) @mcp.tool() @limiter.limit(\"10/minute\") async def rate_limited_tool(): # Tool logic here 3. Network Security For remote access: - Use HTTPS/TLS - Implement IP whitelisting - Use VPN or SSH tunneling \ud83d\udcca Advanced Use Cases Use Case 1: Intelligent PR Triage AI analyzes PRs and automatically: - Labels based on content - Assigns reviewers - Suggests merge strategy - Identifies potential issues def intelligent_triage(pr_data): # AI analyzes code changes if \"test\" in pr_data[\"files\"]: return {\"label\": \"tests\", \"priority\": \"high\"} if pr_data[\"pr\"][\"additions\"] > 500: return {\"label\": \"large-pr\", \"reviewers\": [\"senior-dev\"]} return {\"label\": \"standard\", \"priority\": \"normal\"} Use Case 2: Automated Release Notes AI generates release notes from merged PRs: def generate_release_notes(merged_prs): notes = [] for pr in merged_prs: # AI categorizes changes category = categorize_pr(pr) notes.append(f\"- [{category}] {pr['title']} (#{pr['number']})\") return \"\\n\".join(notes) Use Case 3: Code Quality Insights AI provides code quality feedback: def quality_insights(pr_data): insights = [] # Check test coverage test_files = [f for f in pr_data[\"files\"] if \"test\" in f[\"filename\"]] if not test_files: insights.append(\"\u26a0\ufe0f No test files added\") # Check documentation doc_files = [f for f in pr_data[\"files\"] if f[\"filename\"].endswith(\".md\")] if not doc_files and pr_data[\"pr\"][\"changed_files\"] > 5: insights.append(\"\ud83d\udcdd Consider adding documentation\") return insights \ud83d\udee0\ufe0f Custom MCP Tools Adding Your Own Tools Edit mcp_server.py : @mcp.tool() async def custom_analysis( owner: str, repo: str, analysis_type: str ) -> Dict[str, Any]: \"\"\" Custom analysis tool Args: owner: Repository owner repo: Repository name analysis_type: Type of analysis to perform Returns: Analysis results \"\"\" # Your custom logic here return { \"success\": True, \"analysis\": \"results\" } Adding Resources @mcp.resource(\"github://custom-resource\") async def custom_resource() -> str: \"\"\"Custom resource endpoint\"\"\" return json.dumps({ \"data\": \"custom resource data\" }) \ud83d\udcc8 Monitoring AI Integration Track MCP Usage # Add logging to MCP tools import time @mcp.tool() async def monitored_tool(): start_time = time.time() # Tool logic result = perform_analysis() duration = time.time() - start_time logger.info(f\"Tool executed in {duration:.2f}s\") return result Metrics to Track Tool call frequency Response times Success/failure rates AI assistant usage patterns \ud83d\udd04 Best Practices Error Handling : Always return structured error responses Validation : Validate all inputs before processing Caching : Cache expensive operations (PR analysis, etc.) Logging : Log all AI interactions for debugging Documentation : Keep tool descriptions up-to-date Testing : Test tools independently before AI integration \ud83c\udd98 Troubleshooting MCP Server Not Starting # Check logs tail -f logs/githubbot.log # Verify port is available lsof -i :8001 # Test manually curl http://localhost:8001/health AI Can't Connect Verify MCP server is running Check firewall rules Ensure correct URL/port Test with curl first Tool Errors Check GitHub App permissions Verify installation on repository Review error logs Test with API directly \ud83d\udcda Additional Resources FastMCP Documentation GitHub API Documentation MCP Protocol Specification Build intelligent GitHub automation with AI! \ud83e\udd16\u2728","title":"\ud83e\udd16 AI Integration Guide - MERCUR-E GitHub Bot"},{"location":"AI_INTEGRATION/#ai-integration-guide-mercur-e-github-bot","text":"Complete guide for integrating AI assistants with your GitHub bot using FastMCP.","title":"\ud83e\udd16 AI Integration Guide - MERCUR-E GitHub Bot"},{"location":"AI_INTEGRATION/#overview","text":"The MERCUR-E GitHub Bot exposes a FastMCP server that allows AI assistants (like Claude, GPT, or custom models) to: Parse GitHub comments and extract commands Analyze pull requests and provide insights Suggest appropriate bot commands based on context Generate comprehensive reports Monitor workflow runs","title":"\ud83d\udccb Overview"},{"location":"AI_INTEGRATION/#quick-start","text":"","title":"\ud83d\ude80 Quick Start"},{"location":"AI_INTEGRATION/#1-start-the-mcp-server","text":"# In a separate terminal from the main bot ./run_mcp.sh The MCP server will start on port 8001 (configurable in .env ).","title":"1. Start the MCP Server"},{"location":"AI_INTEGRATION/#2-configure-your-ai-assistant","text":"Point your AI assistant to the MCP server: MCP Server URL: http://localhost:8001 For remote access: MCP Server URL: https://bot.yourdomain.com:8001","title":"2. Configure Your AI Assistant"},{"location":"AI_INTEGRATION/#available-mcp-tools","text":"","title":"\ud83d\udd27 Available MCP Tools"},{"location":"AI_INTEGRATION/#1-parse_github_comment","text":"Parse GitHub comments to extract bot commands. Input: { \"comment_text\": \"/test ci.yml\\n/merge squash\\n/report\" } Output: { \"success\": true, \"commands\": [ {\"command\": \"test\", \"args\": \"ci.yml\"}, {\"command\": \"merge\", \"args\": \"squash\"}, {\"command\": \"report\", \"args\": \"\"} ], \"count\": 3 } AI Use Case: - Extract actionable commands from natural language - Validate command syntax - Count commands in a comment","title":"1. parse_github_comment"},{"location":"AI_INTEGRATION/#2-analyze_pull_request","text":"Get comprehensive analysis of a pull request. Input: { \"owner\": \"username\", \"repo\": \"repository\", \"pr_number\": 123 } Output: { \"success\": true, \"pr\": { \"number\": 123, \"title\": \"Add new feature\", \"state\": \"open\", \"author\": \"developer\", \"mergeable\": true, \"merged\": false, \"draft\": false, \"additions\": 150, \"deletions\": 30, \"changed_files\": 5, \"commits\": 3, \"comments\": 2, \"review_comments\": 1 }, \"ci_status\": { \"state\": \"success\", \"total_count\": 3 }, \"files\": [...], \"labels\": [\"feature\", \"ready-for-review\"] } AI Use Case: - Assess PR readiness for merge - Identify potential issues - Generate summary reports - Recommend next actions","title":"2. analyze_pull_request"},{"location":"AI_INTEGRATION/#3-get_repository_info","text":"Fetch repository metadata and settings. Input: { \"owner\": \"username\", \"repo\": \"repository\" } Output: { \"success\": true, \"repository\": { \"name\": \"repository\", \"full_name\": \"username/repository\", \"description\": \"Project description\", \"private\": false, \"default_branch\": \"main\", \"language\": \"Python\", \"stars\": 42, \"forks\": 7, \"open_issues\": 3, \"has_issues\": true, \"has_projects\": true, \"has_wiki\": true, \"archived\": false } } AI Use Case: - Understand repository context - Check repository settings - Gather statistics","title":"3. get_repository_info"},{"location":"AI_INTEGRATION/#4-suggest_command","text":"Get AI-powered command suggestions based on context. Input: { \"context\": \"PR has passing CI and is approved\", \"pr_state\": \"open\", \"ci_status\": \"success\" } Output: { \"success\": true, \"suggestions\": [ { \"command\": \"/merge\", \"description\": \"Merge the pull request\", \"usage\": \"/merge [squash|merge|rebase]\" } ], \"count\": 1 } AI Use Case: - Recommend appropriate actions - Help users discover commands - Context-aware suggestions","title":"4. suggest_command"},{"location":"AI_INTEGRATION/#5-get_workflow_runs","text":"Retrieve recent workflow run history. Input: { \"owner\": \"username\", \"repo\": \"repository\", \"limit\": 10 } Output: { \"success\": true, \"runs\": [ { \"id\": 123456, \"name\": \"CI\", \"status\": \"completed\", \"conclusion\": \"success\", \"created_at\": \"2024-10-26T12:00:00Z\", \"updated_at\": \"2024-10-26T12:05:00Z\", \"head_branch\": \"main\", \"head_sha\": \"abc1234\" } ], \"count\": 10 } AI Use Case: - Monitor CI/CD pipeline - Identify failing workflows - Track deployment history","title":"5. get_workflow_runs"},{"location":"AI_INTEGRATION/#ai-assistant-integration-examples","text":"","title":"\ud83c\udfaf AI Assistant Integration Examples"},{"location":"AI_INTEGRATION/#example-1-claude-desktop","text":"Configure in claude_desktop_config.json : { \"mcpServers\": { \"mercur-e-bot\": { \"command\": \"python\", \"args\": [\"/path/to/githubbot/mcp_server.py\"], \"env\": { \"GITHUB_APP_ID\": \"123456\" } } } }","title":"Example 1: Claude Desktop"},{"location":"AI_INTEGRATION/#example-2-custom-ai-integration","text":"import requests # Connect to MCP server MCP_URL = \"http://localhost:8001\" # Analyze a PR response = requests.post( f\"{MCP_URL}/tools/analyze_pull_request\", json={ \"owner\": \"myorg\", \"repo\": \"myrepo\", \"pr_number\": 42 } ) pr_data = response.json() # AI processes the data and suggests action if pr_data[\"pr\"][\"mergeable\"] and pr_data[\"ci_status\"][\"state\"] == \"success\": print(\"Suggestion: Use /merge squash to merge this PR\")","title":"Example 2: Custom AI Integration"},{"location":"AI_INTEGRATION/#example-3-automated-pr-review-assistant","text":"# AI-powered PR review workflow def ai_review_pr(owner, repo, pr_number): # 1. Analyze PR pr_analysis = analyze_pull_request(owner, repo, pr_number) # 2. Check CI status if pr_analysis[\"ci_status\"][\"state\"] != \"success\": return \"Wait for CI to pass before merging\" # 3. Check file changes if pr_analysis[\"pr\"][\"changed_files\"] > 50: return \"Large PR - consider breaking into smaller changes\" # 4. Suggest command if pr_analysis[\"pr\"][\"mergeable\"]: return \"Ready to merge! Use: /merge squash\" else: return \"Resolve merge conflicts first\"","title":"Example 3: Automated PR Review Assistant"},{"location":"AI_INTEGRATION/#security-considerations","text":"","title":"\ud83d\udd10 Security Considerations"},{"location":"AI_INTEGRATION/#1-authentication","text":"For production, secure your MCP server: # Add authentication to MCP server from fastapi import Header, HTTPException @mcp.tool() async def secure_tool(api_key: str = Header(...)): if api_key != \"your-secret-key\": raise HTTPException(status_code=401) # Tool logic here","title":"1. Authentication"},{"location":"AI_INTEGRATION/#2-rate-limiting","text":"Implement rate limiting for AI requests: from slowapi import Limiter from slowapi.util import get_remote_address limiter = Limiter(key_func=get_remote_address) @mcp.tool() @limiter.limit(\"10/minute\") async def rate_limited_tool(): # Tool logic here","title":"2. Rate Limiting"},{"location":"AI_INTEGRATION/#3-network-security","text":"For remote access: - Use HTTPS/TLS - Implement IP whitelisting - Use VPN or SSH tunneling","title":"3. Network Security"},{"location":"AI_INTEGRATION/#advanced-use-cases","text":"","title":"\ud83d\udcca Advanced Use Cases"},{"location":"AI_INTEGRATION/#use-case-1-intelligent-pr-triage","text":"AI analyzes PRs and automatically: - Labels based on content - Assigns reviewers - Suggests merge strategy - Identifies potential issues def intelligent_triage(pr_data): # AI analyzes code changes if \"test\" in pr_data[\"files\"]: return {\"label\": \"tests\", \"priority\": \"high\"} if pr_data[\"pr\"][\"additions\"] > 500: return {\"label\": \"large-pr\", \"reviewers\": [\"senior-dev\"]} return {\"label\": \"standard\", \"priority\": \"normal\"}","title":"Use Case 1: Intelligent PR Triage"},{"location":"AI_INTEGRATION/#use-case-2-automated-release-notes","text":"AI generates release notes from merged PRs: def generate_release_notes(merged_prs): notes = [] for pr in merged_prs: # AI categorizes changes category = categorize_pr(pr) notes.append(f\"- [{category}] {pr['title']} (#{pr['number']})\") return \"\\n\".join(notes)","title":"Use Case 2: Automated Release Notes"},{"location":"AI_INTEGRATION/#use-case-3-code-quality-insights","text":"AI provides code quality feedback: def quality_insights(pr_data): insights = [] # Check test coverage test_files = [f for f in pr_data[\"files\"] if \"test\" in f[\"filename\"]] if not test_files: insights.append(\"\u26a0\ufe0f No test files added\") # Check documentation doc_files = [f for f in pr_data[\"files\"] if f[\"filename\"].endswith(\".md\")] if not doc_files and pr_data[\"pr\"][\"changed_files\"] > 5: insights.append(\"\ud83d\udcdd Consider adding documentation\") return insights","title":"Use Case 3: Code Quality Insights"},{"location":"AI_INTEGRATION/#custom-mcp-tools","text":"","title":"\ud83d\udee0\ufe0f Custom MCP Tools"},{"location":"AI_INTEGRATION/#adding-your-own-tools","text":"Edit mcp_server.py : @mcp.tool() async def custom_analysis( owner: str, repo: str, analysis_type: str ) -> Dict[str, Any]: \"\"\" Custom analysis tool Args: owner: Repository owner repo: Repository name analysis_type: Type of analysis to perform Returns: Analysis results \"\"\" # Your custom logic here return { \"success\": True, \"analysis\": \"results\" }","title":"Adding Your Own Tools"},{"location":"AI_INTEGRATION/#adding-resources","text":"@mcp.resource(\"github://custom-resource\") async def custom_resource() -> str: \"\"\"Custom resource endpoint\"\"\" return json.dumps({ \"data\": \"custom resource data\" })","title":"Adding Resources"},{"location":"AI_INTEGRATION/#monitoring-ai-integration","text":"","title":"\ud83d\udcc8 Monitoring AI Integration"},{"location":"AI_INTEGRATION/#track-mcp-usage","text":"# Add logging to MCP tools import time @mcp.tool() async def monitored_tool(): start_time = time.time() # Tool logic result = perform_analysis() duration = time.time() - start_time logger.info(f\"Tool executed in {duration:.2f}s\") return result","title":"Track MCP Usage"},{"location":"AI_INTEGRATION/#metrics-to-track","text":"Tool call frequency Response times Success/failure rates AI assistant usage patterns","title":"Metrics to Track"},{"location":"AI_INTEGRATION/#best-practices","text":"Error Handling : Always return structured error responses Validation : Validate all inputs before processing Caching : Cache expensive operations (PR analysis, etc.) Logging : Log all AI interactions for debugging Documentation : Keep tool descriptions up-to-date Testing : Test tools independently before AI integration","title":"\ud83d\udd04 Best Practices"},{"location":"AI_INTEGRATION/#troubleshooting","text":"","title":"\ud83c\udd98 Troubleshooting"},{"location":"AI_INTEGRATION/#mcp-server-not-starting","text":"# Check logs tail -f logs/githubbot.log # Verify port is available lsof -i :8001 # Test manually curl http://localhost:8001/health","title":"MCP Server Not Starting"},{"location":"AI_INTEGRATION/#ai-cant-connect","text":"Verify MCP server is running Check firewall rules Ensure correct URL/port Test with curl first","title":"AI Can't Connect"},{"location":"AI_INTEGRATION/#tool-errors","text":"Check GitHub App permissions Verify installation on repository Review error logs Test with API directly","title":"Tool Errors"},{"location":"AI_INTEGRATION/#additional-resources","text":"FastMCP Documentation GitHub API Documentation MCP Protocol Specification Build intelligent GitHub automation with AI! \ud83e\udd16\u2728","title":"\ud83d\udcda Additional Resources"},{"location":"AZ%C6%8FRBAYCAN_README/","text":"\ud83e\udd16 MERCUR-E GitHub Bot - Az\u0259rbaycan dilind\u0259 t\u0259limat \ud83d\udccb Layih\u0259 haqq\u0131nda MERCUR-E - GitHub repozitoriyalar\u0131n\u0131 avtomatla\u015fd\u0131rmaq \u00fc\u00e7\u00fcn tam funksional GitHub App. FastAPI v\u0259 FastMCP il\u0259 qurulub, AI inteqrasiyas\u0131 d\u0259st\u0259kl\u0259yir. \u2728 \u018fsas x\u00fcsusiyy\u0259tl\u0259r Komandalar /test [workflow] - GitHub Actions workflow-unu i\u015f\u0259 sal /merge [method] - Pull request-i birl\u0259\u015fdir (squash/merge/rebase) /report - Status hesabat\u0131 yarat Texnologiyalar FastAPI - M\u00fcasir Python web framework PyGithub - GitHub API client FastMCP - AI inteqrasiyas\u0131 \u00fc\u00e7\u00fcn Docker - Konteynerl\u0259\u015fdirm\u0259 Nginx - Reverse proxy v\u0259 TLS \ud83d\ude80 S\u00fcr\u0259tli ba\u015flan\u011f\u0131c 1. Qura\u015fd\u0131rma cd githubbot ./setup.sh 2. Konfiqurasiya .env fayl\u0131n\u0131 redakt\u0259 edin: nano .env A\u015fa\u011f\u0131dak\u0131 m\u0259lumatlar\u0131 daxil edin: GITHUB_APP_ID=sizin_app_id GITHUB_WEBHOOK_SECRET=sizin_webhook_secret 3. Private key \u0259lav\u0259 edin GitHub App-dan y\u00fckl\u0259diyiniz .pem fayl\u0131n\u0131 \u0259lav\u0259 edin: # Private key fayl\u0131n\u0131 kopyalay\u0131n cp ~/Downloads/mercur-e.pem ./private-key.pem chmod 600 private-key.pem 4. Botu i\u015f\u0259 sal\u0131n ./run_local.sh Bot http://localhost:8000 \u00fcnvan\u0131nda i\u015fl\u0259y\u0259c\u0259k. 5. ngrok il\u0259 expose edin Ba\u015fqa terminalda: ngrok http 8000 ngrok-dan HTTPS URL-ni kopyalay\u0131n v\u0259 GitHub App webhook URL-n\u0259 \u0259lav\u0259 edin. \ud83d\udcc1 Layih\u0259 strukturu githubbot/ \u251c\u2500\u2500 main.py # \u018fsas FastAPI t\u0259tbiqi \u251c\u2500\u2500 config.py # Konfiqurasiya \u251c\u2500\u2500 github_auth.py # GitHub autentifikasiyas\u0131 \u251c\u2500\u2500 security.py # T\u0259hl\u00fck\u0259sizlik \u251c\u2500\u2500 commands.py # Komanda i\u015fl\u0259yicil\u0259ri \u251c\u2500\u2500 mcp_server.py # AI inteqrasiyas\u0131 \u251c\u2500\u2500 requirements.txt # Python as\u0131l\u0131l\u0131qlar\u0131 \u251c\u2500\u2500 Dockerfile # Docker image \u251c\u2500\u2500 docker-compose.yml # Docker Compose \u251c\u2500\u2500 nginx.conf # Nginx konfiqurasiyas\u0131 \u251c\u2500\u2500 README.md # \u018fsas s\u0259n\u0259dl\u0259\u015fm\u0259 (\u0130ngilis dilind\u0259) \u2514\u2500\u2500 AZ\u018fRBAYCAN_README.md # Bu fayl \ud83d\udd27 GitHub App yaratmaq 1. GitHub App yarad\u0131n GitHub Settings \u2192 Developer settings \u2192 GitHub Apps \"New GitHub App\" d\u00fcym\u0259sini klikl\u0259yin M\u0259lumatlar\u0131 doldurun: Name : MERCUR-E Homepage URL : Sizin domen v\u0259 ya GitHub repo Webhook URL : https://your-domain.com/webhook Webhook secret : T\u0259sad\u00fcfi g\u00fccl\u00fc \u015fifr\u0259 2. \u0130caz\u0259l\u0259ri t\u0259yin edin Repository permissions: - Actions : Read & write - Contents : Read & write - Issues : Read & write - Pull requests : Read & write - Workflows : Read & write 3. Event-l\u0259r\u0259 abun\u0259 olun [x] Issue comment [x] Pull request [x] Push 4. Private key yarad\u0131n \"Private keys\" b\u00f6lm\u0259sin\u0259 ke\u00e7in \"Generate a private key\" d\u00fcym\u0259sini klikl\u0259yin Y\u00fckl\u0259n\u0259n .pem fayl\u0131n\u0131 private-key.pem olaraq saxlay\u0131n \ud83e\uddea Test etm\u0259k Lokal test Botu i\u015f\u0259 sal\u0131n: ./run_local.sh ngrok i\u015f\u0259 sal\u0131n: ngrok http 8000 GitHub App webhook URL-ni yenil\u0259yin Test repozitoriyas\u0131nda issue v\u0259 ya PR yarad\u0131n Komment \u0259lav\u0259 edin: /test Botun cavab\u0131n\u0131 g\u00f6zl\u0259yin Komandalar\u0131 test edin # Test komandas\u0131 /test # X\u00fcsusi workflow il\u0259 test /test ci.yml # PR-\u0131 birl\u0259\u015fdir /merge squash # Hesabat yarat /report \ud83d\udc33 Docker il\u0259 deployment Docker Compose il\u0259 # Build v\u0259 start docker-compose up -d # Loglar\u0131 g\u00f6rm\u0259k docker-compose logs -f # Dayand\u0131rmaq docker-compose down Sad\u0259c\u0259 Docker # Image build et docker build -t mercur-e-bot . # Container i\u015f\u0259 sal docker run -d \\ --name mercur-e-bot \\ -p 8000:8000 \\ -v $(pwd)/logs:/app/logs \\ -v $(pwd)/private-key.pem:/app/private-key.pem:ro \\ --env-file .env \\ mercur-e-bot \ud83c\udf10 Production deployment 1. Server haz\u0131rl\u0131\u011f\u0131 # Sistemi yenil\u0259 sudo apt update && sudo apt upgrade -y # Docker qura\u015fd\u0131r curl -fsSL https://get.docker.com -o get-docker.sh sudo sh get-docker.sh # Nginx qura\u015fd\u0131r sudo apt install nginx -y # Certbot qura\u015fd\u0131r (SSL \u00fc\u00e7\u00fcn) sudo apt install certbot python3-certbot-nginx -y 2. SSL sertifikat\u0131 \u0259ld\u0259 et sudo certbot --nginx -d bot.sizindomen.com 3. T\u0259tbiqi deploy et # Layih\u0259 fayllar\u0131n\u0131 server\u0259 y\u00fckl\u0259 cd /opt/mercur-e-bot # .env konfiqurasiya et nano .env # Docker Compose il\u0259 i\u015f\u0259 sal docker-compose up -d 4. GitHub App webhook URL-ni yenil\u0259 https://bot.sizindomen.com/webhook \ud83e\udd16 AI inteqrasiyas\u0131 FastMCP server i\u015f\u0259 sal ./run_mcp.sh MCP server 8001 portunda i\u015fl\u0259y\u0259c\u0259k. AI k\u00f6m\u0259k\u00e7isi konfiqurasiya et AI k\u00f6m\u0259k\u00e7inizi MCP server\u0259 qo\u015fun: http://localhost:8001 AI a\u015fa\u011f\u0131dak\u0131lar\u0131 ed\u0259 bil\u0259r: - Kommentl\u0259ri parse etm\u0259k - PR-lar\u0131 analiz etm\u0259k - Komanda t\u0259klifl\u0259ri verm\u0259k - Hesabatlar yaratmaq \ud83d\udcda S\u0259n\u0259dl\u0259\u015fm\u0259 \u018ftrafl\u0131 m\u0259lumat \u00fc\u00e7\u00fcn: README.md - Tam s\u0259n\u0259dl\u0259\u015fm\u0259 (\u0130ngilis dilind\u0259) QUICKSTART.md - 5 d\u0259qiq\u0259lik ba\u015flan\u011f\u0131c DEPLOYMENT.md - Production deployment t\u0259limat\u0131 TESTING.md - Test t\u0259limatlar\u0131 AI_INTEGRATION.md - AI inteqrasiyas\u0131 FAQ.md - Tez-tez veril\u0259n suallar SETUP_CHECKLIST.md - Qura\u015fd\u0131rma checklist \ud83d\udd0d Probleml\u0259rin h\u0259lli Bot komandlara cavab vermir Botun i\u015fl\u0259diyini yoxlay\u0131n: docker-compose ps Loglar\u0131 yoxlay\u0131n: docker-compose logs -f GitHub App webhook deliveries-i yoxlay\u0131n Webhook URL-nin d\u00fczg\u00fcn oldu\u011funu t\u0259sdiq edin Webhook signature validation x\u0259tas\u0131 .env fayl\u0131ndak\u0131 webhook secret-i yoxlay\u0131n GitHub App settings-d\u0259 webhook secret-i yoxlay\u0131n H\u0259r iki yerd\u0259 eyni oldu\u011fundan \u0259min olun Authentication x\u0259talar\u0131 GITHUB_APP_ID d\u00fczg\u00fcn oldu\u011funu yoxlay\u0131n private-key.pem fayl\u0131n\u0131n m\u00f6vcud oldu\u011funu yoxlay\u0131n Botun repozitoriyada qura\u015fd\u0131r\u0131ld\u0131\u011f\u0131n\u0131 t\u0259sdiq edin \ud83d\udee0\ufe0f Faydal\u0131 komandalar # Botu i\u015f\u0259 sal ./run_local.sh # MCP server i\u015f\u0259 sal ./run_mcp.sh # Qura\u015fd\u0131rman\u0131 yoxla ./verify_setup.sh # Loglar\u0131 g\u00f6r tail -f logs/githubbot.log # Docker loglar\u0131 docker-compose logs -f # Docker container-l\u0259ri yoxla docker-compose ps # Yenid\u0259n ba\u015flat docker-compose restart \ud83d\udcca X\u00fcsusiyy\u0259tl\u0259r \u2705 Haz\u0131r funksiyalar \u2705 FastAPI webhook server \u2705 GitHub App autentifikasiyas\u0131 \u2705 Webhook signature validation \u2705 3 slash komanda (/test, /merge, /report) \u2705 GitHub Actions inteqrasiyas\u0131 \u2705 PR birl\u0259\u015fdirm\u0259 \u2705 Status hesabatlar\u0131 \u2705 FastMCP AI inteqrasiyas\u0131 \u2705 Docker d\u0259st\u0259yi \u2705 TLS/HTTPS d\u0259st\u0259yi \u2705 PAM autentifikasiyas\u0131 (opsional) \u2705 Tam s\u0259n\u0259dl\u0259\u015fm\u0259 \ud83d\udd10 T\u0259hl\u00fck\u0259sizlik \u2705 Webhook imza yoxlamas\u0131 \u2705 JWT autentifikasiyas\u0131 \u2705 TLS/HTTPS \u015fifr\u0259l\u0259m\u0259si \u2705 T\u0259hl\u00fck\u0259siz token saxlama \u2705 Fayl silm\u0259 icaz\u0259si yoxdur \u2705 Rate limiting \ud83c\udfaf \u0130stifad\u0259 hallar\u0131 PR avtomatla\u015fd\u0131rmas\u0131 - CI ke\u00e7dikd\u0259n sonra avtomatik birl\u0259\u015fdirm\u0259 Test i\u015f\u0259 salma - Komment il\u0259 test workflow-lar\u0131n\u0131 i\u015f\u0259 sal Status hesabatlar\u0131 - PR v\u0259 issue-lar \u00fc\u00e7\u00fcn \u0259trafl\u0131 hesabatlar AI k\u00f6m\u0259yi - AI il\u0259 a\u011f\u0131ll\u0131 PR analizi v\u0259 t\u00f6vsiy\u0259l\u0259r \ud83d\udcde D\u0259st\u0259k Probleml\u0259r v\u0259 ya suallar \u00fc\u00e7\u00fcn: FAQ.md fayl\u0131n\u0131 yoxlay\u0131n Loglar\u0131 n\u0259z\u0259rd\u0259n ke\u00e7irin GitHub issue yarad\u0131n S\u0259n\u0259dl\u0259\u015fm\u0259y\u0259 bax\u0131n \ud83d\udcdd Qeydl\u0259r B\u00fct\u00fcn fayllar \u0130ngilis dilind\u0259 s\u0259n\u0259dl\u0259\u015fdirilib Bu fayl yaln\u0131z \u0259sas t\u0259limatlar\u0131 \u0259hat\u0259 edir \u018ftrafl\u0131 m\u0259lumat \u00fc\u00e7\u00fcn \u0130ngilis dilind\u0259 s\u0259n\u0259dl\u0259r\u0259 bax\u0131n \ud83c\udf89 U\u011furlar! MERCUR-E GitHub Bot-unuz haz\u0131rd\u0131r! Suallar\u0131n\u0131z varsa, s\u0259n\u0259dl\u0259\u015fm\u0259y\u0259 bax\u0131n v\u0259 ya issue yarad\u0131n. Xo\u015f avtomatla\u015fd\u0131rma! \ud83e\udd16","title":"\ud83e\udd16 MERCUR-E GitHub Bot - Az\u0259rbaycan dilind\u0259 t\u0259limat"},{"location":"AZ%C6%8FRBAYCAN_README/#mercur-e-github-bot-azrbaycan-dilind-tlimat","text":"","title":"\ud83e\udd16 MERCUR-E GitHub Bot - Az\u0259rbaycan dilind\u0259 t\u0259limat"},{"location":"AZ%C6%8FRBAYCAN_README/#layih-haqqnda","text":"MERCUR-E - GitHub repozitoriyalar\u0131n\u0131 avtomatla\u015fd\u0131rmaq \u00fc\u00e7\u00fcn tam funksional GitHub App. FastAPI v\u0259 FastMCP il\u0259 qurulub, AI inteqrasiyas\u0131 d\u0259st\u0259kl\u0259yir.","title":"\ud83d\udccb Layih\u0259 haqq\u0131nda"},{"location":"AZ%C6%8FRBAYCAN_README/#sas-xususiyytlr","text":"","title":"\u2728 \u018fsas x\u00fcsusiyy\u0259tl\u0259r"},{"location":"AZ%C6%8FRBAYCAN_README/#komandalar","text":"/test [workflow] - GitHub Actions workflow-unu i\u015f\u0259 sal /merge [method] - Pull request-i birl\u0259\u015fdir (squash/merge/rebase) /report - Status hesabat\u0131 yarat","title":"Komandalar"},{"location":"AZ%C6%8FRBAYCAN_README/#texnologiyalar","text":"FastAPI - M\u00fcasir Python web framework PyGithub - GitHub API client FastMCP - AI inteqrasiyas\u0131 \u00fc\u00e7\u00fcn Docker - Konteynerl\u0259\u015fdirm\u0259 Nginx - Reverse proxy v\u0259 TLS","title":"Texnologiyalar"},{"location":"AZ%C6%8FRBAYCAN_README/#surtli-baslangc","text":"","title":"\ud83d\ude80 S\u00fcr\u0259tli ba\u015flan\u011f\u0131c"},{"location":"AZ%C6%8FRBAYCAN_README/#1-qurasdrma","text":"cd githubbot ./setup.sh","title":"1. Qura\u015fd\u0131rma"},{"location":"AZ%C6%8FRBAYCAN_README/#2-konfiqurasiya","text":".env fayl\u0131n\u0131 redakt\u0259 edin: nano .env A\u015fa\u011f\u0131dak\u0131 m\u0259lumatlar\u0131 daxil edin: GITHUB_APP_ID=sizin_app_id GITHUB_WEBHOOK_SECRET=sizin_webhook_secret","title":"2. Konfiqurasiya"},{"location":"AZ%C6%8FRBAYCAN_README/#3-private-key-lav-edin","text":"GitHub App-dan y\u00fckl\u0259diyiniz .pem fayl\u0131n\u0131 \u0259lav\u0259 edin: # Private key fayl\u0131n\u0131 kopyalay\u0131n cp ~/Downloads/mercur-e.pem ./private-key.pem chmod 600 private-key.pem","title":"3. Private key \u0259lav\u0259 edin"},{"location":"AZ%C6%8FRBAYCAN_README/#4-botu-is-saln","text":"./run_local.sh Bot http://localhost:8000 \u00fcnvan\u0131nda i\u015fl\u0259y\u0259c\u0259k.","title":"4. Botu i\u015f\u0259 sal\u0131n"},{"location":"AZ%C6%8FRBAYCAN_README/#5-ngrok-il-expose-edin","text":"Ba\u015fqa terminalda: ngrok http 8000 ngrok-dan HTTPS URL-ni kopyalay\u0131n v\u0259 GitHub App webhook URL-n\u0259 \u0259lav\u0259 edin.","title":"5. ngrok il\u0259 expose edin"},{"location":"AZ%C6%8FRBAYCAN_README/#layih-strukturu","text":"githubbot/ \u251c\u2500\u2500 main.py # \u018fsas FastAPI t\u0259tbiqi \u251c\u2500\u2500 config.py # Konfiqurasiya \u251c\u2500\u2500 github_auth.py # GitHub autentifikasiyas\u0131 \u251c\u2500\u2500 security.py # T\u0259hl\u00fck\u0259sizlik \u251c\u2500\u2500 commands.py # Komanda i\u015fl\u0259yicil\u0259ri \u251c\u2500\u2500 mcp_server.py # AI inteqrasiyas\u0131 \u251c\u2500\u2500 requirements.txt # Python as\u0131l\u0131l\u0131qlar\u0131 \u251c\u2500\u2500 Dockerfile # Docker image \u251c\u2500\u2500 docker-compose.yml # Docker Compose \u251c\u2500\u2500 nginx.conf # Nginx konfiqurasiyas\u0131 \u251c\u2500\u2500 README.md # \u018fsas s\u0259n\u0259dl\u0259\u015fm\u0259 (\u0130ngilis dilind\u0259) \u2514\u2500\u2500 AZ\u018fRBAYCAN_README.md # Bu fayl","title":"\ud83d\udcc1 Layih\u0259 strukturu"},{"location":"AZ%C6%8FRBAYCAN_README/#github-app-yaratmaq","text":"","title":"\ud83d\udd27 GitHub App yaratmaq"},{"location":"AZ%C6%8FRBAYCAN_README/#1-github-app-yaradn","text":"GitHub Settings \u2192 Developer settings \u2192 GitHub Apps \"New GitHub App\" d\u00fcym\u0259sini klikl\u0259yin M\u0259lumatlar\u0131 doldurun: Name : MERCUR-E Homepage URL : Sizin domen v\u0259 ya GitHub repo Webhook URL : https://your-domain.com/webhook Webhook secret : T\u0259sad\u00fcfi g\u00fccl\u00fc \u015fifr\u0259","title":"1. GitHub App yarad\u0131n"},{"location":"AZ%C6%8FRBAYCAN_README/#2-icazlri-tyin-edin","text":"Repository permissions: - Actions : Read & write - Contents : Read & write - Issues : Read & write - Pull requests : Read & write - Workflows : Read & write","title":"2. \u0130caz\u0259l\u0259ri t\u0259yin edin"},{"location":"AZ%C6%8FRBAYCAN_README/#3-event-lr-abun-olun","text":"[x] Issue comment [x] Pull request [x] Push","title":"3. Event-l\u0259r\u0259 abun\u0259 olun"},{"location":"AZ%C6%8FRBAYCAN_README/#4-private-key-yaradn","text":"\"Private keys\" b\u00f6lm\u0259sin\u0259 ke\u00e7in \"Generate a private key\" d\u00fcym\u0259sini klikl\u0259yin Y\u00fckl\u0259n\u0259n .pem fayl\u0131n\u0131 private-key.pem olaraq saxlay\u0131n","title":"4. Private key yarad\u0131n"},{"location":"AZ%C6%8FRBAYCAN_README/#test-etmk","text":"","title":"\ud83e\uddea Test etm\u0259k"},{"location":"AZ%C6%8FRBAYCAN_README/#lokal-test","text":"Botu i\u015f\u0259 sal\u0131n: ./run_local.sh ngrok i\u015f\u0259 sal\u0131n: ngrok http 8000 GitHub App webhook URL-ni yenil\u0259yin Test repozitoriyas\u0131nda issue v\u0259 ya PR yarad\u0131n Komment \u0259lav\u0259 edin: /test Botun cavab\u0131n\u0131 g\u00f6zl\u0259yin","title":"Lokal test"},{"location":"AZ%C6%8FRBAYCAN_README/#komandalar-test-edin","text":"# Test komandas\u0131 /test # X\u00fcsusi workflow il\u0259 test /test ci.yml # PR-\u0131 birl\u0259\u015fdir /merge squash # Hesabat yarat /report","title":"Komandalar\u0131 test edin"},{"location":"AZ%C6%8FRBAYCAN_README/#docker-il-deployment","text":"","title":"\ud83d\udc33 Docker il\u0259 deployment"},{"location":"AZ%C6%8FRBAYCAN_README/#docker-compose-il","text":"# Build v\u0259 start docker-compose up -d # Loglar\u0131 g\u00f6rm\u0259k docker-compose logs -f # Dayand\u0131rmaq docker-compose down","title":"Docker Compose il\u0259"},{"location":"AZ%C6%8FRBAYCAN_README/#sadc-docker","text":"# Image build et docker build -t mercur-e-bot . # Container i\u015f\u0259 sal docker run -d \\ --name mercur-e-bot \\ -p 8000:8000 \\ -v $(pwd)/logs:/app/logs \\ -v $(pwd)/private-key.pem:/app/private-key.pem:ro \\ --env-file .env \\ mercur-e-bot","title":"Sad\u0259c\u0259 Docker"},{"location":"AZ%C6%8FRBAYCAN_README/#production-deployment","text":"","title":"\ud83c\udf10 Production deployment"},{"location":"AZ%C6%8FRBAYCAN_README/#1-server-hazrlg","text":"# Sistemi yenil\u0259 sudo apt update && sudo apt upgrade -y # Docker qura\u015fd\u0131r curl -fsSL https://get.docker.com -o get-docker.sh sudo sh get-docker.sh # Nginx qura\u015fd\u0131r sudo apt install nginx -y # Certbot qura\u015fd\u0131r (SSL \u00fc\u00e7\u00fcn) sudo apt install certbot python3-certbot-nginx -y","title":"1. Server haz\u0131rl\u0131\u011f\u0131"},{"location":"AZ%C6%8FRBAYCAN_README/#2-ssl-sertifikat-ld-et","text":"sudo certbot --nginx -d bot.sizindomen.com","title":"2. SSL sertifikat\u0131 \u0259ld\u0259 et"},{"location":"AZ%C6%8FRBAYCAN_README/#3-ttbiqi-deploy-et","text":"# Layih\u0259 fayllar\u0131n\u0131 server\u0259 y\u00fckl\u0259 cd /opt/mercur-e-bot # .env konfiqurasiya et nano .env # Docker Compose il\u0259 i\u015f\u0259 sal docker-compose up -d","title":"3. T\u0259tbiqi deploy et"},{"location":"AZ%C6%8FRBAYCAN_README/#4-github-app-webhook-url-ni-yenil","text":"https://bot.sizindomen.com/webhook","title":"4. GitHub App webhook URL-ni yenil\u0259"},{"location":"AZ%C6%8FRBAYCAN_README/#ai-inteqrasiyas","text":"","title":"\ud83e\udd16 AI inteqrasiyas\u0131"},{"location":"AZ%C6%8FRBAYCAN_README/#fastmcp-server-is-sal","text":"./run_mcp.sh MCP server 8001 portunda i\u015fl\u0259y\u0259c\u0259k.","title":"FastMCP server i\u015f\u0259 sal"},{"location":"AZ%C6%8FRBAYCAN_README/#ai-komkcisi-konfiqurasiya-et","text":"AI k\u00f6m\u0259k\u00e7inizi MCP server\u0259 qo\u015fun: http://localhost:8001 AI a\u015fa\u011f\u0131dak\u0131lar\u0131 ed\u0259 bil\u0259r: - Kommentl\u0259ri parse etm\u0259k - PR-lar\u0131 analiz etm\u0259k - Komanda t\u0259klifl\u0259ri verm\u0259k - Hesabatlar yaratmaq","title":"AI k\u00f6m\u0259k\u00e7isi konfiqurasiya et"},{"location":"AZ%C6%8FRBAYCAN_README/#sndlsm","text":"\u018ftrafl\u0131 m\u0259lumat \u00fc\u00e7\u00fcn: README.md - Tam s\u0259n\u0259dl\u0259\u015fm\u0259 (\u0130ngilis dilind\u0259) QUICKSTART.md - 5 d\u0259qiq\u0259lik ba\u015flan\u011f\u0131c DEPLOYMENT.md - Production deployment t\u0259limat\u0131 TESTING.md - Test t\u0259limatlar\u0131 AI_INTEGRATION.md - AI inteqrasiyas\u0131 FAQ.md - Tez-tez veril\u0259n suallar SETUP_CHECKLIST.md - Qura\u015fd\u0131rma checklist","title":"\ud83d\udcda S\u0259n\u0259dl\u0259\u015fm\u0259"},{"location":"AZ%C6%8FRBAYCAN_README/#problemlrin-hlli","text":"","title":"\ud83d\udd0d Probleml\u0259rin h\u0259lli"},{"location":"AZ%C6%8FRBAYCAN_README/#bot-komandlara-cavab-vermir","text":"Botun i\u015fl\u0259diyini yoxlay\u0131n: docker-compose ps Loglar\u0131 yoxlay\u0131n: docker-compose logs -f GitHub App webhook deliveries-i yoxlay\u0131n Webhook URL-nin d\u00fczg\u00fcn oldu\u011funu t\u0259sdiq edin","title":"Bot komandlara cavab vermir"},{"location":"AZ%C6%8FRBAYCAN_README/#webhook-signature-validation-xtas","text":".env fayl\u0131ndak\u0131 webhook secret-i yoxlay\u0131n GitHub App settings-d\u0259 webhook secret-i yoxlay\u0131n H\u0259r iki yerd\u0259 eyni oldu\u011fundan \u0259min olun","title":"Webhook signature validation x\u0259tas\u0131"},{"location":"AZ%C6%8FRBAYCAN_README/#authentication-xtalar","text":"GITHUB_APP_ID d\u00fczg\u00fcn oldu\u011funu yoxlay\u0131n private-key.pem fayl\u0131n\u0131n m\u00f6vcud oldu\u011funu yoxlay\u0131n Botun repozitoriyada qura\u015fd\u0131r\u0131ld\u0131\u011f\u0131n\u0131 t\u0259sdiq edin","title":"Authentication x\u0259talar\u0131"},{"location":"AZ%C6%8FRBAYCAN_README/#faydal-komandalar","text":"# Botu i\u015f\u0259 sal ./run_local.sh # MCP server i\u015f\u0259 sal ./run_mcp.sh # Qura\u015fd\u0131rman\u0131 yoxla ./verify_setup.sh # Loglar\u0131 g\u00f6r tail -f logs/githubbot.log # Docker loglar\u0131 docker-compose logs -f # Docker container-l\u0259ri yoxla docker-compose ps # Yenid\u0259n ba\u015flat docker-compose restart","title":"\ud83d\udee0\ufe0f Faydal\u0131 komandalar"},{"location":"AZ%C6%8FRBAYCAN_README/#xususiyytlr","text":"","title":"\ud83d\udcca X\u00fcsusiyy\u0259tl\u0259r"},{"location":"AZ%C6%8FRBAYCAN_README/#hazr-funksiyalar","text":"\u2705 FastAPI webhook server \u2705 GitHub App autentifikasiyas\u0131 \u2705 Webhook signature validation \u2705 3 slash komanda (/test, /merge, /report) \u2705 GitHub Actions inteqrasiyas\u0131 \u2705 PR birl\u0259\u015fdirm\u0259 \u2705 Status hesabatlar\u0131 \u2705 FastMCP AI inteqrasiyas\u0131 \u2705 Docker d\u0259st\u0259yi \u2705 TLS/HTTPS d\u0259st\u0259yi \u2705 PAM autentifikasiyas\u0131 (opsional) \u2705 Tam s\u0259n\u0259dl\u0259\u015fm\u0259","title":"\u2705 Haz\u0131r funksiyalar"},{"location":"AZ%C6%8FRBAYCAN_README/#thluksizlik","text":"\u2705 Webhook imza yoxlamas\u0131 \u2705 JWT autentifikasiyas\u0131 \u2705 TLS/HTTPS \u015fifr\u0259l\u0259m\u0259si \u2705 T\u0259hl\u00fck\u0259siz token saxlama \u2705 Fayl silm\u0259 icaz\u0259si yoxdur \u2705 Rate limiting","title":"\ud83d\udd10 T\u0259hl\u00fck\u0259sizlik"},{"location":"AZ%C6%8FRBAYCAN_README/#istifad-hallar","text":"PR avtomatla\u015fd\u0131rmas\u0131 - CI ke\u00e7dikd\u0259n sonra avtomatik birl\u0259\u015fdirm\u0259 Test i\u015f\u0259 salma - Komment il\u0259 test workflow-lar\u0131n\u0131 i\u015f\u0259 sal Status hesabatlar\u0131 - PR v\u0259 issue-lar \u00fc\u00e7\u00fcn \u0259trafl\u0131 hesabatlar AI k\u00f6m\u0259yi - AI il\u0259 a\u011f\u0131ll\u0131 PR analizi v\u0259 t\u00f6vsiy\u0259l\u0259r","title":"\ud83c\udfaf \u0130stifad\u0259 hallar\u0131"},{"location":"AZ%C6%8FRBAYCAN_README/#dstk","text":"Probleml\u0259r v\u0259 ya suallar \u00fc\u00e7\u00fcn: FAQ.md fayl\u0131n\u0131 yoxlay\u0131n Loglar\u0131 n\u0259z\u0259rd\u0259n ke\u00e7irin GitHub issue yarad\u0131n S\u0259n\u0259dl\u0259\u015fm\u0259y\u0259 bax\u0131n","title":"\ud83d\udcde D\u0259st\u0259k"},{"location":"AZ%C6%8FRBAYCAN_README/#qeydlr","text":"B\u00fct\u00fcn fayllar \u0130ngilis dilind\u0259 s\u0259n\u0259dl\u0259\u015fdirilib Bu fayl yaln\u0131z \u0259sas t\u0259limatlar\u0131 \u0259hat\u0259 edir \u018ftrafl\u0131 m\u0259lumat \u00fc\u00e7\u00fcn \u0130ngilis dilind\u0259 s\u0259n\u0259dl\u0259r\u0259 bax\u0131n","title":"\ud83d\udcdd Qeydl\u0259r"},{"location":"AZ%C6%8FRBAYCAN_README/#ugurlar","text":"MERCUR-E GitHub Bot-unuz haz\u0131rd\u0131r! Suallar\u0131n\u0131z varsa, s\u0259n\u0259dl\u0259\u015fm\u0259y\u0259 bax\u0131n v\u0259 ya issue yarad\u0131n. Xo\u015f avtomatla\u015fd\u0131rma! \ud83e\udd16","title":"\ud83c\udf89 U\u011furlar!"},{"location":"CONTRIBUTING/","text":"\ud83e\udd1d Contributing to MERCUR-E GitHub Bot Thank you for your interest in contributing! This document provides guidelines for contributing to the project. \ud83c\udfaf Ways to Contribute Report bugs - Create detailed issue reports Suggest features - Propose new functionality Improve documentation - Fix typos, add examples Write code - Implement features or fix bugs Review PRs - Help review pull requests Share feedback - Tell us how you're using the bot \ud83d\ude80 Getting Started 1. Fork and Clone # Fork the repository on GitHub # Then clone your fork git clone https://github.com/YOUR_USERNAME/mercur-e.git cd mercur-e 2. Set Up Development Environment # Run setup ./setup.sh # Create .env file cp .env.example .env # Edit .env with your test GitHub App credentials 3. Create a Branch git checkout -b feature/your-feature-name # or git checkout -b fix/bug-description \ud83d\udcbb Development Workflow Running Locally # Start the bot ./run_local.sh # In another terminal, start ngrok ngrok http 8000 # Update your test GitHub App webhook URL Code Style We follow PEP 8 with some modifications: # Format code with black ./venv/bin/black *.py # Check with flake8 ./venv/bin/flake8 *.py --max-line-length=100 Adding a New Command Add handler in commands.py : async def handle_mycommand(self, pr, issue, args): \"\"\"Handle /mycommand\"\"\" try: # Your logic here return { 'success': True, 'message': '\u2705 Command executed successfully' } except Exception as e: return { 'success': False, 'message': f'\u274c Error: {str(e)}' } Register in main.py : elif command == 'mycommand': result = await handler.handle_mycommand(pr, issue_obj, args) Update documentation : Add to README.md command list Add examples to TESTING.md Adding MCP Tools Add tool in mcp_server.py : @mcp.tool() async def my_tool(param: str) -> Dict[str, Any]: \"\"\" Tool description Args: param: Parameter description Returns: Result dictionary \"\"\" return {\"success\": True, \"data\": \"result\"} Document in AI_INTEGRATION.md \ud83e\uddea Testing Manual Testing # Test health endpoint curl http://localhost:8000/health # Test command parsing curl -X POST http://localhost:8000/api/parse-comment \\ -H \"Content-Type: application/json\" \\ -d '{\"comment\": \"/test\"}' Integration Testing Create a test repository Install your test GitHub App Test commands on PRs and issues Verify webhook deliveries in GitHub App settings Writing Tests (Future) # tests/test_commands.py import pytest from commands import CommandParser def test_parse_command(): commands = CommandParser.parse_commands(\"/test ci.yml\") assert len(commands) == 1 assert commands[0]['command'] == 'test' \ud83d\udcdd Commit Guidelines Commit Message Format type(scope): subject body (optional) footer (optional) Types: - feat : New feature - fix : Bug fix - docs : Documentation changes - style : Code style changes (formatting) - refactor : Code refactoring - test : Adding tests - chore : Maintenance tasks Examples: feat(commands): add /deploy command for automated deployments Implements a new /deploy command that triggers deployment workflows and posts status updates. Closes #123 fix(webhook): handle missing installation_id gracefully Previously, webhooks without installation_id would crash the bot. Now we log a warning and continue processing. \ud83d\udd0d Code Review Process Before Submitting PR [ ] Code follows style guidelines [ ] All tests pass (if applicable) [ ] Documentation updated [ ] Commit messages are clear [ ] No sensitive data in commits PR Description Template ## Description Brief description of changes ## Type of Change - [ ] Bug fix - [ ] New feature - [ ] Documentation update - [ ] Refactoring ## Testing How to test these changes ## Checklist - [ ] Code follows style guidelines - [ ] Documentation updated - [ ] Tests added/updated - [ ] No breaking changes Review Process Automated checks run (if configured) Maintainer reviews code Feedback provided Changes requested or approved Merged to main branch \ud83d\udc1b Bug Reports Good Bug Report Includes Description : Clear description of the bug Steps to Reproduce : Detailed steps Expected Behavior : What should happen Actual Behavior : What actually happens Environment : OS, Python version, etc. Logs : Relevant log excerpts (remove sensitive data) Bug Report Template **Description** A clear description of the bug. **Steps to Reproduce** 1. Go to '...' 2. Click on '...' 3. See error **Expected Behavior** What you expected to happen. **Actual Behavior** What actually happened. **Environment** - OS: Ubuntu 22.04 - Python: 3.11 - Bot Version: 1.0.0 **Logs** Paste relevant logs here **Additional Context** Any other information. \ud83d\udca1 Feature Requests Good Feature Request Includes Use Case : Why is this needed? Proposed Solution : How should it work? Alternatives : Other approaches considered Examples : Similar features elsewhere Feature Request Template **Use Case** Describe the problem this feature would solve. **Proposed Solution** How should this feature work? **Alternatives** Other solutions you've considered. **Additional Context** Examples, mockups, etc. \ud83d\udcda Documentation Documentation Standards Use clear, concise language Include code examples Add screenshots where helpful Keep it up-to-date Test all examples Documentation Files README.md - Main documentation QUICKSTART.md - Quick setup guide DEPLOYMENT.md - Production deployment TESTING.md - Testing guide AI_INTEGRATION.md - AI integration FAQ.md - Common questions \ud83c\udfa8 Design Principles Code Principles Simplicity - Keep it simple and readable Security - Security first, always Reliability - Handle errors gracefully Performance - Optimize where it matters Maintainability - Write code others can understand API Design Use clear, descriptive names Return consistent response formats Include proper error messages Document all endpoints Error Handling # Good try: result = risky_operation() return {'success': True, 'data': result} except SpecificError as e: logger.error(f\"Operation failed: {e}\") return {'success': False, 'message': str(e)} # Bad try: result = risky_operation() except: pass # Silent failure \ud83d\udd10 Security Security Guidelines Never commit secrets or keys Validate all inputs Use parameterized queries Keep dependencies updated Follow OWASP guidelines Reporting Security Issues DO NOT create public issues for security vulnerabilities. Instead, email: security@yourdomain.com Include: - Description of vulnerability - Steps to reproduce - Potential impact - Suggested fix (if any) \ud83d\udcdc License By contributing, you agree that your contributions will be licensed under the MIT License. \ud83d\ude4f Recognition Contributors will be recognized in: - README.md contributors section - Release notes - Project documentation \u2753 Questions? Check the FAQ.md Review existing issues Ask in discussions Contact maintainers Thank you for contributing to MERCUR-E GitHub Bot! \ud83d\ude80","title":"\ud83e\udd1d Contributing to MERCUR-E GitHub Bot"},{"location":"CONTRIBUTING/#contributing-to-mercur-e-github-bot","text":"Thank you for your interest in contributing! This document provides guidelines for contributing to the project.","title":"\ud83e\udd1d Contributing to MERCUR-E GitHub Bot"},{"location":"CONTRIBUTING/#ways-to-contribute","text":"Report bugs - Create detailed issue reports Suggest features - Propose new functionality Improve documentation - Fix typos, add examples Write code - Implement features or fix bugs Review PRs - Help review pull requests Share feedback - Tell us how you're using the bot","title":"\ud83c\udfaf Ways to Contribute"},{"location":"CONTRIBUTING/#getting-started","text":"","title":"\ud83d\ude80 Getting Started"},{"location":"CONTRIBUTING/#1-fork-and-clone","text":"# Fork the repository on GitHub # Then clone your fork git clone https://github.com/YOUR_USERNAME/mercur-e.git cd mercur-e","title":"1. Fork and Clone"},{"location":"CONTRIBUTING/#2-set-up-development-environment","text":"# Run setup ./setup.sh # Create .env file cp .env.example .env # Edit .env with your test GitHub App credentials","title":"2. Set Up Development Environment"},{"location":"CONTRIBUTING/#3-create-a-branch","text":"git checkout -b feature/your-feature-name # or git checkout -b fix/bug-description","title":"3. Create a Branch"},{"location":"CONTRIBUTING/#development-workflow","text":"","title":"\ud83d\udcbb Development Workflow"},{"location":"CONTRIBUTING/#running-locally","text":"# Start the bot ./run_local.sh # In another terminal, start ngrok ngrok http 8000 # Update your test GitHub App webhook URL","title":"Running Locally"},{"location":"CONTRIBUTING/#code-style","text":"We follow PEP 8 with some modifications: # Format code with black ./venv/bin/black *.py # Check with flake8 ./venv/bin/flake8 *.py --max-line-length=100","title":"Code Style"},{"location":"CONTRIBUTING/#adding-a-new-command","text":"Add handler in commands.py : async def handle_mycommand(self, pr, issue, args): \"\"\"Handle /mycommand\"\"\" try: # Your logic here return { 'success': True, 'message': '\u2705 Command executed successfully' } except Exception as e: return { 'success': False, 'message': f'\u274c Error: {str(e)}' } Register in main.py : elif command == 'mycommand': result = await handler.handle_mycommand(pr, issue_obj, args) Update documentation : Add to README.md command list Add examples to TESTING.md","title":"Adding a New Command"},{"location":"CONTRIBUTING/#adding-mcp-tools","text":"Add tool in mcp_server.py : @mcp.tool() async def my_tool(param: str) -> Dict[str, Any]: \"\"\" Tool description Args: param: Parameter description Returns: Result dictionary \"\"\" return {\"success\": True, \"data\": \"result\"} Document in AI_INTEGRATION.md","title":"Adding MCP Tools"},{"location":"CONTRIBUTING/#testing","text":"","title":"\ud83e\uddea Testing"},{"location":"CONTRIBUTING/#manual-testing","text":"# Test health endpoint curl http://localhost:8000/health # Test command parsing curl -X POST http://localhost:8000/api/parse-comment \\ -H \"Content-Type: application/json\" \\ -d '{\"comment\": \"/test\"}'","title":"Manual Testing"},{"location":"CONTRIBUTING/#integration-testing","text":"Create a test repository Install your test GitHub App Test commands on PRs and issues Verify webhook deliveries in GitHub App settings","title":"Integration Testing"},{"location":"CONTRIBUTING/#writing-tests-future","text":"# tests/test_commands.py import pytest from commands import CommandParser def test_parse_command(): commands = CommandParser.parse_commands(\"/test ci.yml\") assert len(commands) == 1 assert commands[0]['command'] == 'test'","title":"Writing Tests (Future)"},{"location":"CONTRIBUTING/#commit-guidelines","text":"","title":"\ud83d\udcdd Commit Guidelines"},{"location":"CONTRIBUTING/#commit-message-format","text":"type(scope): subject body (optional) footer (optional) Types: - feat : New feature - fix : Bug fix - docs : Documentation changes - style : Code style changes (formatting) - refactor : Code refactoring - test : Adding tests - chore : Maintenance tasks Examples: feat(commands): add /deploy command for automated deployments Implements a new /deploy command that triggers deployment workflows and posts status updates. Closes #123 fix(webhook): handle missing installation_id gracefully Previously, webhooks without installation_id would crash the bot. Now we log a warning and continue processing.","title":"Commit Message Format"},{"location":"CONTRIBUTING/#code-review-process","text":"","title":"\ud83d\udd0d Code Review Process"},{"location":"CONTRIBUTING/#before-submitting-pr","text":"[ ] Code follows style guidelines [ ] All tests pass (if applicable) [ ] Documentation updated [ ] Commit messages are clear [ ] No sensitive data in commits","title":"Before Submitting PR"},{"location":"CONTRIBUTING/#pr-description-template","text":"## Description Brief description of changes ## Type of Change - [ ] Bug fix - [ ] New feature - [ ] Documentation update - [ ] Refactoring ## Testing How to test these changes ## Checklist - [ ] Code follows style guidelines - [ ] Documentation updated - [ ] Tests added/updated - [ ] No breaking changes","title":"PR Description Template"},{"location":"CONTRIBUTING/#review-process","text":"Automated checks run (if configured) Maintainer reviews code Feedback provided Changes requested or approved Merged to main branch","title":"Review Process"},{"location":"CONTRIBUTING/#bug-reports","text":"","title":"\ud83d\udc1b Bug Reports"},{"location":"CONTRIBUTING/#good-bug-report-includes","text":"Description : Clear description of the bug Steps to Reproduce : Detailed steps Expected Behavior : What should happen Actual Behavior : What actually happens Environment : OS, Python version, etc. Logs : Relevant log excerpts (remove sensitive data)","title":"Good Bug Report Includes"},{"location":"CONTRIBUTING/#bug-report-template","text":"**Description** A clear description of the bug. **Steps to Reproduce** 1. Go to '...' 2. Click on '...' 3. See error **Expected Behavior** What you expected to happen. **Actual Behavior** What actually happened. **Environment** - OS: Ubuntu 22.04 - Python: 3.11 - Bot Version: 1.0.0 **Logs** Paste relevant logs here **Additional Context** Any other information.","title":"Bug Report Template"},{"location":"CONTRIBUTING/#feature-requests","text":"","title":"\ud83d\udca1 Feature Requests"},{"location":"CONTRIBUTING/#good-feature-request-includes","text":"Use Case : Why is this needed? Proposed Solution : How should it work? Alternatives : Other approaches considered Examples : Similar features elsewhere","title":"Good Feature Request Includes"},{"location":"CONTRIBUTING/#feature-request-template","text":"**Use Case** Describe the problem this feature would solve. **Proposed Solution** How should this feature work? **Alternatives** Other solutions you've considered. **Additional Context** Examples, mockups, etc.","title":"Feature Request Template"},{"location":"CONTRIBUTING/#documentation","text":"","title":"\ud83d\udcda Documentation"},{"location":"CONTRIBUTING/#documentation-standards","text":"Use clear, concise language Include code examples Add screenshots where helpful Keep it up-to-date Test all examples","title":"Documentation Standards"},{"location":"CONTRIBUTING/#documentation-files","text":"README.md - Main documentation QUICKSTART.md - Quick setup guide DEPLOYMENT.md - Production deployment TESTING.md - Testing guide AI_INTEGRATION.md - AI integration FAQ.md - Common questions","title":"Documentation Files"},{"location":"CONTRIBUTING/#design-principles","text":"","title":"\ud83c\udfa8 Design Principles"},{"location":"CONTRIBUTING/#code-principles","text":"Simplicity - Keep it simple and readable Security - Security first, always Reliability - Handle errors gracefully Performance - Optimize where it matters Maintainability - Write code others can understand","title":"Code Principles"},{"location":"CONTRIBUTING/#api-design","text":"Use clear, descriptive names Return consistent response formats Include proper error messages Document all endpoints","title":"API Design"},{"location":"CONTRIBUTING/#error-handling","text":"# Good try: result = risky_operation() return {'success': True, 'data': result} except SpecificError as e: logger.error(f\"Operation failed: {e}\") return {'success': False, 'message': str(e)} # Bad try: result = risky_operation() except: pass # Silent failure","title":"Error Handling"},{"location":"CONTRIBUTING/#security","text":"","title":"\ud83d\udd10 Security"},{"location":"CONTRIBUTING/#security-guidelines","text":"Never commit secrets or keys Validate all inputs Use parameterized queries Keep dependencies updated Follow OWASP guidelines","title":"Security Guidelines"},{"location":"CONTRIBUTING/#reporting-security-issues","text":"DO NOT create public issues for security vulnerabilities. Instead, email: security@yourdomain.com Include: - Description of vulnerability - Steps to reproduce - Potential impact - Suggested fix (if any)","title":"Reporting Security Issues"},{"location":"CONTRIBUTING/#license","text":"By contributing, you agree that your contributions will be licensed under the MIT License.","title":"\ud83d\udcdc License"},{"location":"CONTRIBUTING/#recognition","text":"Contributors will be recognized in: - README.md contributors section - Release notes - Project documentation","title":"\ud83d\ude4f Recognition"},{"location":"CONTRIBUTING/#questions","text":"Check the FAQ.md Review existing issues Ask in discussions Contact maintainers Thank you for contributing to MERCUR-E GitHub Bot! \ud83d\ude80","title":"\u2753 Questions?"},{"location":"DEPLOYMENT/","text":"\ud83d\ude80 Deployment Guide for MERCUR-E GitHub Bot Complete guide for deploying the GitHub bot to production with TLS/HTTPS. \ud83d\udccb Prerequisites Ubuntu/Debian server (or similar Linux distribution) Domain name pointing to your server Root or sudo access Docker and Docker Compose installed \ud83d\udda5\ufe0f Server Setup 1. Update System sudo apt update sudo apt upgrade -y 2. Install Docker # Install Docker curl -fsSL https://get.docker.com -o get-docker.sh sudo sh get-docker.sh # Add user to docker group sudo usermod -aG docker $USER # Install Docker Compose sudo apt install docker-compose -y # Verify installation docker --version docker-compose --version 3. Install Nginx (if not using Docker Compose nginx) sudo apt install nginx -y sudo systemctl enable nginx sudo systemctl start nginx 4. Install Certbot for Let's Encrypt sudo apt install certbot python3-certbot-nginx -y \ud83c\udf10 Domain Configuration 1. DNS Setup Add an A record for your subdomain: Type: A Name: bot (or your preferred subdomain) Value: YOUR_SERVER_IP TTL: 3600 Wait for DNS propagation (can take up to 48 hours, usually much faster): # Check DNS propagation nslookup bot.yourdomain.com 2. Firewall Configuration # Allow HTTP and HTTPS sudo ufw allow 80/tcp sudo ufw allow 443/tcp sudo ufw allow 22/tcp # SSH # Enable firewall sudo ufw enable sudo ufw status \ud83d\udce6 Application Deployment 1. Clone/Upload Project # Create application directory sudo mkdir -p /opt/mercur-e sudo chown $USER:$USER /opt/mercur-e # Upload your project files to /opt/mercur-e # Or clone from git: cd /opt/mercur-e git clone <your-repo-url> . 2. Configure Environment cd /opt/mercur-e # Copy environment template cp .env.example .env # Edit configuration nano .env Update with your production values: # GitHub App Configuration GITHUB_APP_ID=123456 GITHUB_APP_PRIVATE_KEY_PATH=./private-key.pem GITHUB_WEBHOOK_SECRET=your_secure_webhook_secret # Server Configuration HOST=0.0.0.0 PORT=8000 DEBUG=False # PAM Authentication PAM_SERVICE=login PAM_ENABLED=False # AI Integration FASTMCP_ENABLED=True FASTMCP_PORT=8001 # Logging LOG_LEVEL=INFO LOG_FILE=./logs/githubbot.log # Security ALLOWED_ORIGINS=https://bot.yourdomain.com 3. Add GitHub App Private Key # Upload your private-key.pem file nano private-key.pem # Paste your private key content # Set proper permissions chmod 600 private-key.pem 4. Update Nginx Configuration # Edit nginx.conf nano nginx.conf Replace all instances of your-domain.com with your actual domain (e.g., bot.yourdomain.com ). \ud83d\udd12 SSL/TLS Setup Method 1: Using Certbot (Recommended) # Obtain SSL certificate sudo certbot --nginx -d bot.yourdomain.com # Follow the prompts: # - Enter email address # - Agree to terms # - Choose whether to redirect HTTP to HTTPS (recommended: yes) Certbot will automatically: - Obtain certificate from Let's Encrypt - Configure Nginx - Set up auto-renewal Method 2: Manual Certificate If using Docker Compose with included nginx: # Obtain certificate only (without nginx auto-config) sudo certbot certonly --standalone -d bot.yourdomain.com # Certificates will be saved to: # /etc/letsencrypt/live/bot.yourdomain.com/fullchain.pem # /etc/letsencrypt/live/bot.yourdomain.com/privkey.pem Update docker-compose.yml to mount certificates: volumes: - /etc/letsencrypt:/etc/letsencrypt:ro 3. Test Auto-Renewal # Dry run renewal sudo certbot renew --dry-run # If successful, certbot will auto-renew before expiration \ud83d\udc33 Docker Deployment Option 1: Docker Compose (Recommended) cd /opt/mercur-e # Build and start services docker-compose up -d # Check status docker-compose ps # View logs docker-compose logs -f # Stop services docker-compose down Option 2: Docker Only # Build image docker build -t mercur-e . # Run container docker run -d \\ --name mercur-e \\ --restart unless-stopped \\ -p 8000:8000 \\ -p 8001:8001 \\ -v $(pwd)/logs:/app/logs \\ -v $(pwd)/private-key.pem:/app/private-key.pem:ro \\ --env-file .env \\ mercur-e # Check logs docker logs -f mercur-e \ud83d\udd27 Nginx Configuration (Standalone) If not using Docker Compose nginx: # Create nginx site configuration sudo nano /etc/nginx/sites-available/mercur-e Add configuration: upstream githubbot { server localhost:8000; } server { listen 80; server_name bot.yourdomain.com; location /.well-known/acme-challenge/ { root /var/www/certbot; } location / { return 301 https://$host$request_uri; } } server { listen 443 ssl http2; server_name bot.yourdomain.com; ssl_certificate /etc/letsencrypt/live/bot.yourdomain.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/bot.yourdomain.com/privkey.pem; ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; add_header Strict-Transport-Security \"max-age=31536000\" always; location /webhook { proxy_pass http://githubbot; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } location / { proxy_pass http://githubbot; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } Enable site: # Create symbolic link sudo ln -s /etc/nginx/sites-available/mercur-e /etc/nginx/sites-enabled/ # Test configuration sudo nginx -t # Reload nginx sudo systemctl reload nginx \ud83d\udd04 GitHub App Configuration 1. Update Webhook URL Go to your GitHub App settings: https://github.com/settings/apps/MERCUR-E Update webhook URL: https://bot.yourdomain.com/webhook 2. Verify Webhook Secret Ensure the webhook secret in GitHub matches your .env file. 3. Test Webhook GitHub provides a \"Recent Deliveries\" section where you can: - View webhook payloads - Redeliver webhooks - Check response status \u2705 Verification 1. Health Check # Local curl http://localhost:8000/health # Public curl https://bot.yourdomain.com/health Expected response: { \"status\": \"healthy\", \"github_app_id\": 123456, \"fastmcp_enabled\": true, \"pam_enabled\": false } 2. Test Webhook Create a test issue or PR comment with /test in a repository where the app is installed. Check logs: # Docker Compose docker-compose logs -f githubbot # Docker docker logs -f mercur-e # Local logs tail -f /opt/mercur-e/logs/githubbot.log 3. SSL Check # Check SSL certificate openssl s_client -connect bot.yourdomain.com:443 -servername bot.yourdomain.com # Or use online tools: # https://www.ssllabs.com/ssltest/ \ud83d\udcca Monitoring 1. Set Up Log Rotation sudo nano /etc/logrotate.d/mercur-e Add: /opt/mercur-e/logs/*.log { daily rotate 14 compress delaycompress notifempty create 0640 www-data www-data sharedscripts } 2. Monitor with systemd (Alternative to Docker) Create systemd service: sudo nano /etc/systemd/system/mercur-e.service [Unit] Description=MERCUR-E GitHub Bot After=network.target [Service] Type=simple User=www-data WorkingDirectory=/opt/mercur-e Environment=\"PATH=/opt/mercur-e/venv/bin\" ExecStart=/opt/mercur-e/venv/bin/python main.py Restart=always RestartSec=10 [Install] WantedBy=multi-user.target Enable and start: sudo systemctl daemon-reload sudo systemctl enable mercur-e sudo systemctl start mercur-e sudo systemctl status mercur-e \ud83d\udd04 Updates and Maintenance Update Application cd /opt/mercur-e # Pull latest changes git pull # Rebuild and restart docker-compose down docker-compose build docker-compose up -d Backup # Backup configuration and keys tar -czf mercur-e-backup-$(date +%Y%m%d).tar.gz \\ .env \\ private-key.pem \\ logs/ # Store backup securely Certificate Renewal Certbot auto-renews, but you can manually renew: sudo certbot renew sudo systemctl reload nginx \ud83d\udc1b Troubleshooting Webhook not working Check firewall allows port 443 Verify DNS points to correct IP Check nginx is running: sudo systemctl status nginx Review nginx logs: sudo tail -f /var/log/nginx/error.log Check application logs: docker-compose logs -f SSL certificate issues # Check certificate validity sudo certbot certificates # Renew if needed sudo certbot renew --force-renewal Application crashes # Check logs docker-compose logs --tail=100 githubbot # Restart services docker-compose restart # Check resource usage docker stats \ud83d\udcc8 Performance Optimization 1. Enable HTTP/2 Already enabled in nginx configuration. 2. Add Caching Headers Update nginx configuration to add caching for static assets. 3. Rate Limiting Already configured in nginx.conf for webhook endpoint. 4. Resource Limits Update docker-compose.yml : services: githubbot: deploy: resources: limits: cpus: '1.0' memory: 512M reservations: cpus: '0.5' memory: 256M \ud83c\udfaf Production Checklist [ ] Domain DNS configured [ ] SSL certificate obtained and valid [ ] .env file configured with production values [ ] private-key.pem uploaded and secured (chmod 600) [ ] Firewall configured (ports 80, 443, 22) [ ] Nginx configured and running [ ] Docker containers running [ ] GitHub App webhook URL updated [ ] Webhook deliveries successful [ ] Health check endpoint responding [ ] Logs being written correctly [ ] Log rotation configured [ ] Backup strategy in place [ ] Monitoring set up Your MERCUR-E GitHub Bot should now be running securely in production! \ud83c\udf89","title":"\ud83d\ude80 Deployment Guide for MERCUR-E GitHub Bot"},{"location":"DEPLOYMENT/#deployment-guide-for-mercur-e-github-bot","text":"Complete guide for deploying the GitHub bot to production with TLS/HTTPS.","title":"\ud83d\ude80 Deployment Guide for MERCUR-E GitHub Bot"},{"location":"DEPLOYMENT/#prerequisites","text":"Ubuntu/Debian server (or similar Linux distribution) Domain name pointing to your server Root or sudo access Docker and Docker Compose installed","title":"\ud83d\udccb Prerequisites"},{"location":"DEPLOYMENT/#server-setup","text":"","title":"\ud83d\udda5\ufe0f Server Setup"},{"location":"DEPLOYMENT/#1-update-system","text":"sudo apt update sudo apt upgrade -y","title":"1. Update System"},{"location":"DEPLOYMENT/#2-install-docker","text":"# Install Docker curl -fsSL https://get.docker.com -o get-docker.sh sudo sh get-docker.sh # Add user to docker group sudo usermod -aG docker $USER # Install Docker Compose sudo apt install docker-compose -y # Verify installation docker --version docker-compose --version","title":"2. Install Docker"},{"location":"DEPLOYMENT/#3-install-nginx-if-not-using-docker-compose-nginx","text":"sudo apt install nginx -y sudo systemctl enable nginx sudo systemctl start nginx","title":"3. Install Nginx (if not using Docker Compose nginx)"},{"location":"DEPLOYMENT/#4-install-certbot-for-lets-encrypt","text":"sudo apt install certbot python3-certbot-nginx -y","title":"4. Install Certbot for Let's Encrypt"},{"location":"DEPLOYMENT/#domain-configuration","text":"","title":"\ud83c\udf10 Domain Configuration"},{"location":"DEPLOYMENT/#1-dns-setup","text":"Add an A record for your subdomain: Type: A Name: bot (or your preferred subdomain) Value: YOUR_SERVER_IP TTL: 3600 Wait for DNS propagation (can take up to 48 hours, usually much faster): # Check DNS propagation nslookup bot.yourdomain.com","title":"1. DNS Setup"},{"location":"DEPLOYMENT/#2-firewall-configuration","text":"# Allow HTTP and HTTPS sudo ufw allow 80/tcp sudo ufw allow 443/tcp sudo ufw allow 22/tcp # SSH # Enable firewall sudo ufw enable sudo ufw status","title":"2. Firewall Configuration"},{"location":"DEPLOYMENT/#application-deployment","text":"","title":"\ud83d\udce6 Application Deployment"},{"location":"DEPLOYMENT/#1-cloneupload-project","text":"# Create application directory sudo mkdir -p /opt/mercur-e sudo chown $USER:$USER /opt/mercur-e # Upload your project files to /opt/mercur-e # Or clone from git: cd /opt/mercur-e git clone <your-repo-url> .","title":"1. Clone/Upload Project"},{"location":"DEPLOYMENT/#2-configure-environment","text":"cd /opt/mercur-e # Copy environment template cp .env.example .env # Edit configuration nano .env Update with your production values: # GitHub App Configuration GITHUB_APP_ID=123456 GITHUB_APP_PRIVATE_KEY_PATH=./private-key.pem GITHUB_WEBHOOK_SECRET=your_secure_webhook_secret # Server Configuration HOST=0.0.0.0 PORT=8000 DEBUG=False # PAM Authentication PAM_SERVICE=login PAM_ENABLED=False # AI Integration FASTMCP_ENABLED=True FASTMCP_PORT=8001 # Logging LOG_LEVEL=INFO LOG_FILE=./logs/githubbot.log # Security ALLOWED_ORIGINS=https://bot.yourdomain.com","title":"2. Configure Environment"},{"location":"DEPLOYMENT/#3-add-github-app-private-key","text":"# Upload your private-key.pem file nano private-key.pem # Paste your private key content # Set proper permissions chmod 600 private-key.pem","title":"3. Add GitHub App Private Key"},{"location":"DEPLOYMENT/#4-update-nginx-configuration","text":"# Edit nginx.conf nano nginx.conf Replace all instances of your-domain.com with your actual domain (e.g., bot.yourdomain.com ).","title":"4. Update Nginx Configuration"},{"location":"DEPLOYMENT/#ssltls-setup","text":"","title":"\ud83d\udd12 SSL/TLS Setup"},{"location":"DEPLOYMENT/#method-1-using-certbot-recommended","text":"# Obtain SSL certificate sudo certbot --nginx -d bot.yourdomain.com # Follow the prompts: # - Enter email address # - Agree to terms # - Choose whether to redirect HTTP to HTTPS (recommended: yes) Certbot will automatically: - Obtain certificate from Let's Encrypt - Configure Nginx - Set up auto-renewal","title":"Method 1: Using Certbot (Recommended)"},{"location":"DEPLOYMENT/#method-2-manual-certificate","text":"If using Docker Compose with included nginx: # Obtain certificate only (without nginx auto-config) sudo certbot certonly --standalone -d bot.yourdomain.com # Certificates will be saved to: # /etc/letsencrypt/live/bot.yourdomain.com/fullchain.pem # /etc/letsencrypt/live/bot.yourdomain.com/privkey.pem Update docker-compose.yml to mount certificates: volumes: - /etc/letsencrypt:/etc/letsencrypt:ro","title":"Method 2: Manual Certificate"},{"location":"DEPLOYMENT/#3-test-auto-renewal","text":"# Dry run renewal sudo certbot renew --dry-run # If successful, certbot will auto-renew before expiration","title":"3. Test Auto-Renewal"},{"location":"DEPLOYMENT/#docker-deployment","text":"","title":"\ud83d\udc33 Docker Deployment"},{"location":"DEPLOYMENT/#option-1-docker-compose-recommended","text":"cd /opt/mercur-e # Build and start services docker-compose up -d # Check status docker-compose ps # View logs docker-compose logs -f # Stop services docker-compose down","title":"Option 1: Docker Compose (Recommended)"},{"location":"DEPLOYMENT/#option-2-docker-only","text":"# Build image docker build -t mercur-e . # Run container docker run -d \\ --name mercur-e \\ --restart unless-stopped \\ -p 8000:8000 \\ -p 8001:8001 \\ -v $(pwd)/logs:/app/logs \\ -v $(pwd)/private-key.pem:/app/private-key.pem:ro \\ --env-file .env \\ mercur-e # Check logs docker logs -f mercur-e","title":"Option 2: Docker Only"},{"location":"DEPLOYMENT/#nginx-configuration-standalone","text":"If not using Docker Compose nginx: # Create nginx site configuration sudo nano /etc/nginx/sites-available/mercur-e Add configuration: upstream githubbot { server localhost:8000; } server { listen 80; server_name bot.yourdomain.com; location /.well-known/acme-challenge/ { root /var/www/certbot; } location / { return 301 https://$host$request_uri; } } server { listen 443 ssl http2; server_name bot.yourdomain.com; ssl_certificate /etc/letsencrypt/live/bot.yourdomain.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/bot.yourdomain.com/privkey.pem; ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; add_header Strict-Transport-Security \"max-age=31536000\" always; location /webhook { proxy_pass http://githubbot; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } location / { proxy_pass http://githubbot; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } Enable site: # Create symbolic link sudo ln -s /etc/nginx/sites-available/mercur-e /etc/nginx/sites-enabled/ # Test configuration sudo nginx -t # Reload nginx sudo systemctl reload nginx","title":"\ud83d\udd27 Nginx Configuration (Standalone)"},{"location":"DEPLOYMENT/#github-app-configuration","text":"","title":"\ud83d\udd04 GitHub App Configuration"},{"location":"DEPLOYMENT/#1-update-webhook-url","text":"Go to your GitHub App settings: https://github.com/settings/apps/MERCUR-E Update webhook URL: https://bot.yourdomain.com/webhook","title":"1. Update Webhook URL"},{"location":"DEPLOYMENT/#2-verify-webhook-secret","text":"Ensure the webhook secret in GitHub matches your .env file.","title":"2. Verify Webhook Secret"},{"location":"DEPLOYMENT/#3-test-webhook","text":"GitHub provides a \"Recent Deliveries\" section where you can: - View webhook payloads - Redeliver webhooks - Check response status","title":"3. Test Webhook"},{"location":"DEPLOYMENT/#verification","text":"","title":"\u2705 Verification"},{"location":"DEPLOYMENT/#1-health-check","text":"# Local curl http://localhost:8000/health # Public curl https://bot.yourdomain.com/health Expected response: { \"status\": \"healthy\", \"github_app_id\": 123456, \"fastmcp_enabled\": true, \"pam_enabled\": false }","title":"1. Health Check"},{"location":"DEPLOYMENT/#2-test-webhook","text":"Create a test issue or PR comment with /test in a repository where the app is installed. Check logs: # Docker Compose docker-compose logs -f githubbot # Docker docker logs -f mercur-e # Local logs tail -f /opt/mercur-e/logs/githubbot.log","title":"2. Test Webhook"},{"location":"DEPLOYMENT/#3-ssl-check","text":"# Check SSL certificate openssl s_client -connect bot.yourdomain.com:443 -servername bot.yourdomain.com # Or use online tools: # https://www.ssllabs.com/ssltest/","title":"3. SSL Check"},{"location":"DEPLOYMENT/#monitoring","text":"","title":"\ud83d\udcca Monitoring"},{"location":"DEPLOYMENT/#1-set-up-log-rotation","text":"sudo nano /etc/logrotate.d/mercur-e Add: /opt/mercur-e/logs/*.log { daily rotate 14 compress delaycompress notifempty create 0640 www-data www-data sharedscripts }","title":"1. Set Up Log Rotation"},{"location":"DEPLOYMENT/#2-monitor-with-systemd-alternative-to-docker","text":"Create systemd service: sudo nano /etc/systemd/system/mercur-e.service [Unit] Description=MERCUR-E GitHub Bot After=network.target [Service] Type=simple User=www-data WorkingDirectory=/opt/mercur-e Environment=\"PATH=/opt/mercur-e/venv/bin\" ExecStart=/opt/mercur-e/venv/bin/python main.py Restart=always RestartSec=10 [Install] WantedBy=multi-user.target Enable and start: sudo systemctl daemon-reload sudo systemctl enable mercur-e sudo systemctl start mercur-e sudo systemctl status mercur-e","title":"2. Monitor with systemd (Alternative to Docker)"},{"location":"DEPLOYMENT/#updates-and-maintenance","text":"","title":"\ud83d\udd04 Updates and Maintenance"},{"location":"DEPLOYMENT/#update-application","text":"cd /opt/mercur-e # Pull latest changes git pull # Rebuild and restart docker-compose down docker-compose build docker-compose up -d","title":"Update Application"},{"location":"DEPLOYMENT/#backup","text":"# Backup configuration and keys tar -czf mercur-e-backup-$(date +%Y%m%d).tar.gz \\ .env \\ private-key.pem \\ logs/ # Store backup securely","title":"Backup"},{"location":"DEPLOYMENT/#certificate-renewal","text":"Certbot auto-renews, but you can manually renew: sudo certbot renew sudo systemctl reload nginx","title":"Certificate Renewal"},{"location":"DEPLOYMENT/#troubleshooting","text":"","title":"\ud83d\udc1b Troubleshooting"},{"location":"DEPLOYMENT/#webhook-not-working","text":"Check firewall allows port 443 Verify DNS points to correct IP Check nginx is running: sudo systemctl status nginx Review nginx logs: sudo tail -f /var/log/nginx/error.log Check application logs: docker-compose logs -f","title":"Webhook not working"},{"location":"DEPLOYMENT/#ssl-certificate-issues","text":"# Check certificate validity sudo certbot certificates # Renew if needed sudo certbot renew --force-renewal","title":"SSL certificate issues"},{"location":"DEPLOYMENT/#application-crashes","text":"# Check logs docker-compose logs --tail=100 githubbot # Restart services docker-compose restart # Check resource usage docker stats","title":"Application crashes"},{"location":"DEPLOYMENT/#performance-optimization","text":"","title":"\ud83d\udcc8 Performance Optimization"},{"location":"DEPLOYMENT/#1-enable-http2","text":"Already enabled in nginx configuration.","title":"1. Enable HTTP/2"},{"location":"DEPLOYMENT/#2-add-caching-headers","text":"Update nginx configuration to add caching for static assets.","title":"2. Add Caching Headers"},{"location":"DEPLOYMENT/#3-rate-limiting","text":"Already configured in nginx.conf for webhook endpoint.","title":"3. Rate Limiting"},{"location":"DEPLOYMENT/#4-resource-limits","text":"Update docker-compose.yml : services: githubbot: deploy: resources: limits: cpus: '1.0' memory: 512M reservations: cpus: '0.5' memory: 256M","title":"4. Resource Limits"},{"location":"DEPLOYMENT/#production-checklist","text":"[ ] Domain DNS configured [ ] SSL certificate obtained and valid [ ] .env file configured with production values [ ] private-key.pem uploaded and secured (chmod 600) [ ] Firewall configured (ports 80, 443, 22) [ ] Nginx configured and running [ ] Docker containers running [ ] GitHub App webhook URL updated [ ] Webhook deliveries successful [ ] Health check endpoint responding [ ] Logs being written correctly [ ] Log rotation configured [ ] Backup strategy in place [ ] Monitoring set up Your MERCUR-E GitHub Bot should now be running securely in production! \ud83c\udf89","title":"\ud83c\udfaf Production Checklist"},{"location":"FAQ/","text":"\u2753 Frequently Asked Questions - MERCUR-E GitHub Bot General Questions What is MERCUR-E GitHub Bot? MERCUR-E is a fully functional GitHub App that automates repository management through slash commands, GitHub Actions integration, and AI-powered insights. What can it do? Trigger GitHub Actions workflows with /test Merge pull requests automatically with /merge Generate comprehensive reports with /report Integrate with AI assistants via FastMCP Validate webhooks securely Support PAM authentication for privileged operations Is it free? Yes, the bot is open source and free to use. You only need a GitHub account to create a GitHub App. Setup Questions How do I create a GitHub App? Go to GitHub Settings \u2192 Developer settings \u2192 GitHub Apps Click \"New GitHub App\" Fill in the required information Set permissions (see README.md) Subscribe to events (issue_comment, pull_request, push) Generate and download private key Where do I get the App ID? After creating your GitHub App: 1. Go to the app's settings page 2. The App ID is shown at the top of the page 3. Copy it to your .env file What is the webhook secret? The webhook secret is a password that GitHub uses to sign webhook payloads. You set this when creating your GitHub App. Use a strong, random string. Generate one: openssl rand -hex 32 Where is the private key? When you create a GitHub App and click \"Generate private key\", GitHub downloads a .pem file. Save this as private-key.pem in your project directory. Installation Questions What Python version do I need? Python 3.8 or higher. Check your version: python3 --version Do I need Docker? No, Docker is optional. You can run the bot with: - Python virtual environment (recommended for development) - Docker (recommended for production) - systemd service Can I run this on Windows? Yes, but the setup scripts are written for Linux/Mac. On Windows: 1. Create venv manually: python -m venv venv 2. Activate: venv\\Scripts\\activate 3. Install: pip install -r requirements.txt 4. Run: python main.py Installation fails with dependency errors Update pip first: ./venv/bin/pip install --upgrade pip Then retry: ./venv/bin/pip install -r requirements.txt Configuration Questions What environment variables are required? Minimum required: GITHUB_APP_ID=your_app_id GITHUB_WEBHOOK_SECRET=your_secret The bot will use defaults for other settings. Can I use a different port? Yes, edit .env : PORT=9000 How do I enable debug logging? Edit .env : DEBUG=True LOG_LEVEL=DEBUG Running Questions How do I test locally? Start the bot: ./run_local.sh In another terminal, start ngrok: ngrok http 8000 Update GitHub App webhook URL with ngrok URL Test on a repository where the app is installed What is ngrok? ngrok creates a secure tunnel to your localhost, allowing GitHub to send webhooks to your local development machine. Download: https://ngrok.com/download Can I use something other than ngrok? Yes, alternatives: - Cloudflare Tunnel (free, no account needed) - localtunnel - serveo - Your own reverse proxy The bot starts but doesn't respond to commands Check: 1. Is the app installed on the repository? 2. Is the webhook URL correct? 3. Are webhooks being delivered? (Check GitHub App settings \u2192 Advanced \u2192 Recent Deliveries) 4. Check logs: tail -f logs/githubbot.log Command Questions What commands are available? /test [workflow] - Trigger GitHub Actions workflow /merge [method] - Merge PR (squash/merge/rebase) /report - Generate status report Can I add custom commands? Yes! Edit commands.py to add new command handlers, then register them in main.py . Why isn't /merge working? Check: 1. Is it used on a pull request (not an issue)? 2. Is the PR mergeable (no conflicts)? 3. Does the bot have pull_requests: write permission? 4. Are CI checks passing? Can I use multiple commands in one comment? Yes! Each command on its own line: /test ci.yml /report Permissions Questions What permissions does the bot need? Repository permissions: - Actions: Read & write - Contents: Read & write - Issues: Read & write - Pull requests: Read & write - Workflows: Read & write Can the bot delete files? No, the bot is designed to only read and write files, not delete them. This is a safety feature. Can I restrict who can use commands? Currently, anyone with write access to the repository can use commands. You can add custom authorization logic in commands.py . Security Questions Is the webhook signature validated? Yes, all webhooks are validated using HMAC-SHA256 (or SHA1 for legacy). How is authentication handled? The bot uses: 1. GitHub App JWT for app-level authentication 2. Installation tokens for repository access 3. Optional PAM for privileged operations Should I use HTTPS in production? Absolutely! Use Let's Encrypt for free SSL certificates. See DEPLOYMENT.md for setup instructions. What is PAM authentication? PAM (Pluggable Authentication Modules) provides an additional layer of authentication for privileged operations. It's optional and disabled by default. AI Integration Questions What is FastMCP? FastMCP is a framework for exposing tools to AI assistants. It allows AI models to interact with your GitHub bot programmatically. How do I enable AI integration? Start the MCP server: ./run_mcp.sh Configure your AI assistant to connect to http://localhost:8001 Which AI assistants are supported? Any AI assistant that supports the MCP protocol: - Claude Desktop - Custom GPT implementations - Any MCP-compatible client Can AI assistants execute commands directly? No, AI assistants can only: - Parse comments - Analyze PRs - Suggest commands - Generate reports Actual command execution requires a human to post the command in a GitHub comment. Deployment Questions How do I deploy to production? See DEPLOYMENT.md for complete instructions. Quick summary: 1. Set up a server with Docker 2. Configure domain and DNS 3. Obtain SSL certificate with Let's Encrypt 4. Deploy with Docker Compose 5. Update GitHub App webhook URL What are the server requirements? Minimum: - 1 CPU core - 512 MB RAM - 10 GB disk space - Ubuntu 20.04+ or similar Linux distribution Can I deploy to Heroku/Railway/Render? Yes! The bot works on any platform that supports: - Python 3.8+ - Persistent storage for logs - Inbound HTTPS connections How do I update the bot? cd /opt/mercur-e-bot git pull docker-compose down docker-compose build docker-compose up -d Troubleshooting Questions Webhook signature validation fails Check webhook secret matches in GitHub App and .env Verify no extra spaces in secret Check GitHub is sending SHA-256 signature Review logs for exact error \"Installation not found\" error Install the app on the repository Verify installation ID is correct Check app has required permissions Commands execute but nothing happens Check bot has required permissions Verify GitHub Actions workflows exist Review logs for errors Check API rate limits High memory usage Check for memory leaks in custom code Limit concurrent webhook processing Add resource limits in Docker Monitor with docker stats Logs are too large Configure log rotation in /etc/logrotate.d/mercur-e-bot : /opt/mercur-e-bot/logs/*.log { daily rotate 7 compress delaycompress notifempty } Performance Questions How many requests can it handle? Depends on your server, but the bot can handle: - 100+ webhooks per minute - 1000+ API requests per hour (GitHub rate limit) Can I scale horizontally? Yes, but you'll need: - Load balancer - Shared storage for logs - Redis for token caching (not implemented by default) How do I monitor performance? Check logs: tail -f logs/githubbot.log Monitor Docker: docker stats Use APM tools like Datadog, New Relic Set up health check monitoring Advanced Questions Can I use this with GitHub Enterprise? Yes, update the GitHub API base URL in github_auth.py : Github(token, base_url=\"https://github.enterprise.com/api/v3\") Can I integrate with other services? Yes! Add integrations in commands.py or create new modules. Examples: - Slack notifications - Jira integration - Custom CI/CD systems Can I use a database? Yes, add database support for: - Event history - User preferences - Command audit logs - Analytics How do I contribute? Fork the repository Create a feature branch Make your changes Add tests Submit a pull request Support Questions Where can I get help? Check this FAQ Review README.md and other documentation Check logs for error messages Search GitHub issues Create a new issue with details How do I report a bug? Create a GitHub issue with: - Description of the problem - Steps to reproduce - Expected vs actual behavior - Log excerpts (remove sensitive data) - Environment details (OS, Python version, etc.) Can I request features? Yes! Create a GitHub issue with: - Feature description - Use case - Expected behavior - Any relevant examples Still have questions? Check the documentation or create an issue!","title":"\u2753 Frequently Asked Questions - MERCUR-E GitHub Bot"},{"location":"FAQ/#frequently-asked-questions-mercur-e-github-bot","text":"","title":"\u2753 Frequently Asked Questions - MERCUR-E GitHub Bot"},{"location":"FAQ/#general-questions","text":"","title":"General Questions"},{"location":"FAQ/#what-is-mercur-e-github-bot","text":"MERCUR-E is a fully functional GitHub App that automates repository management through slash commands, GitHub Actions integration, and AI-powered insights.","title":"What is MERCUR-E GitHub Bot?"},{"location":"FAQ/#what-can-it-do","text":"Trigger GitHub Actions workflows with /test Merge pull requests automatically with /merge Generate comprehensive reports with /report Integrate with AI assistants via FastMCP Validate webhooks securely Support PAM authentication for privileged operations","title":"What can it do?"},{"location":"FAQ/#is-it-free","text":"Yes, the bot is open source and free to use. You only need a GitHub account to create a GitHub App.","title":"Is it free?"},{"location":"FAQ/#setup-questions","text":"","title":"Setup Questions"},{"location":"FAQ/#how-do-i-create-a-github-app","text":"Go to GitHub Settings \u2192 Developer settings \u2192 GitHub Apps Click \"New GitHub App\" Fill in the required information Set permissions (see README.md) Subscribe to events (issue_comment, pull_request, push) Generate and download private key","title":"How do I create a GitHub App?"},{"location":"FAQ/#where-do-i-get-the-app-id","text":"After creating your GitHub App: 1. Go to the app's settings page 2. The App ID is shown at the top of the page 3. Copy it to your .env file","title":"Where do I get the App ID?"},{"location":"FAQ/#what-is-the-webhook-secret","text":"The webhook secret is a password that GitHub uses to sign webhook payloads. You set this when creating your GitHub App. Use a strong, random string. Generate one: openssl rand -hex 32","title":"What is the webhook secret?"},{"location":"FAQ/#where-is-the-private-key","text":"When you create a GitHub App and click \"Generate private key\", GitHub downloads a .pem file. Save this as private-key.pem in your project directory.","title":"Where is the private key?"},{"location":"FAQ/#installation-questions","text":"","title":"Installation Questions"},{"location":"FAQ/#what-python-version-do-i-need","text":"Python 3.8 or higher. Check your version: python3 --version","title":"What Python version do I need?"},{"location":"FAQ/#do-i-need-docker","text":"No, Docker is optional. You can run the bot with: - Python virtual environment (recommended for development) - Docker (recommended for production) - systemd service","title":"Do I need Docker?"},{"location":"FAQ/#can-i-run-this-on-windows","text":"Yes, but the setup scripts are written for Linux/Mac. On Windows: 1. Create venv manually: python -m venv venv 2. Activate: venv\\Scripts\\activate 3. Install: pip install -r requirements.txt 4. Run: python main.py","title":"Can I run this on Windows?"},{"location":"FAQ/#installation-fails-with-dependency-errors","text":"Update pip first: ./venv/bin/pip install --upgrade pip Then retry: ./venv/bin/pip install -r requirements.txt","title":"Installation fails with dependency errors"},{"location":"FAQ/#configuration-questions","text":"","title":"Configuration Questions"},{"location":"FAQ/#what-environment-variables-are-required","text":"Minimum required: GITHUB_APP_ID=your_app_id GITHUB_WEBHOOK_SECRET=your_secret The bot will use defaults for other settings.","title":"What environment variables are required?"},{"location":"FAQ/#can-i-use-a-different-port","text":"Yes, edit .env : PORT=9000","title":"Can I use a different port?"},{"location":"FAQ/#how-do-i-enable-debug-logging","text":"Edit .env : DEBUG=True LOG_LEVEL=DEBUG","title":"How do I enable debug logging?"},{"location":"FAQ/#running-questions","text":"","title":"Running Questions"},{"location":"FAQ/#how-do-i-test-locally","text":"Start the bot: ./run_local.sh In another terminal, start ngrok: ngrok http 8000 Update GitHub App webhook URL with ngrok URL Test on a repository where the app is installed","title":"How do I test locally?"},{"location":"FAQ/#what-is-ngrok","text":"ngrok creates a secure tunnel to your localhost, allowing GitHub to send webhooks to your local development machine. Download: https://ngrok.com/download","title":"What is ngrok?"},{"location":"FAQ/#can-i-use-something-other-than-ngrok","text":"Yes, alternatives: - Cloudflare Tunnel (free, no account needed) - localtunnel - serveo - Your own reverse proxy","title":"Can I use something other than ngrok?"},{"location":"FAQ/#the-bot-starts-but-doesnt-respond-to-commands","text":"Check: 1. Is the app installed on the repository? 2. Is the webhook URL correct? 3. Are webhooks being delivered? (Check GitHub App settings \u2192 Advanced \u2192 Recent Deliveries) 4. Check logs: tail -f logs/githubbot.log","title":"The bot starts but doesn't respond to commands"},{"location":"FAQ/#command-questions","text":"","title":"Command Questions"},{"location":"FAQ/#what-commands-are-available","text":"/test [workflow] - Trigger GitHub Actions workflow /merge [method] - Merge PR (squash/merge/rebase) /report - Generate status report","title":"What commands are available?"},{"location":"FAQ/#can-i-add-custom-commands","text":"Yes! Edit commands.py to add new command handlers, then register them in main.py .","title":"Can I add custom commands?"},{"location":"FAQ/#why-isnt-merge-working","text":"Check: 1. Is it used on a pull request (not an issue)? 2. Is the PR mergeable (no conflicts)? 3. Does the bot have pull_requests: write permission? 4. Are CI checks passing?","title":"Why isn't /merge working?"},{"location":"FAQ/#can-i-use-multiple-commands-in-one-comment","text":"Yes! Each command on its own line: /test ci.yml /report","title":"Can I use multiple commands in one comment?"},{"location":"FAQ/#permissions-questions","text":"","title":"Permissions Questions"},{"location":"FAQ/#what-permissions-does-the-bot-need","text":"Repository permissions: - Actions: Read & write - Contents: Read & write - Issues: Read & write - Pull requests: Read & write - Workflows: Read & write","title":"What permissions does the bot need?"},{"location":"FAQ/#can-the-bot-delete-files","text":"No, the bot is designed to only read and write files, not delete them. This is a safety feature.","title":"Can the bot delete files?"},{"location":"FAQ/#can-i-restrict-who-can-use-commands","text":"Currently, anyone with write access to the repository can use commands. You can add custom authorization logic in commands.py .","title":"Can I restrict who can use commands?"},{"location":"FAQ/#security-questions","text":"","title":"Security Questions"},{"location":"FAQ/#is-the-webhook-signature-validated","text":"Yes, all webhooks are validated using HMAC-SHA256 (or SHA1 for legacy).","title":"Is the webhook signature validated?"},{"location":"FAQ/#how-is-authentication-handled","text":"The bot uses: 1. GitHub App JWT for app-level authentication 2. Installation tokens for repository access 3. Optional PAM for privileged operations","title":"How is authentication handled?"},{"location":"FAQ/#should-i-use-https-in-production","text":"Absolutely! Use Let's Encrypt for free SSL certificates. See DEPLOYMENT.md for setup instructions.","title":"Should I use HTTPS in production?"},{"location":"FAQ/#what-is-pam-authentication","text":"PAM (Pluggable Authentication Modules) provides an additional layer of authentication for privileged operations. It's optional and disabled by default.","title":"What is PAM authentication?"},{"location":"FAQ/#ai-integration-questions","text":"","title":"AI Integration Questions"},{"location":"FAQ/#what-is-fastmcp","text":"FastMCP is a framework for exposing tools to AI assistants. It allows AI models to interact with your GitHub bot programmatically.","title":"What is FastMCP?"},{"location":"FAQ/#how-do-i-enable-ai-integration","text":"Start the MCP server: ./run_mcp.sh Configure your AI assistant to connect to http://localhost:8001","title":"How do I enable AI integration?"},{"location":"FAQ/#which-ai-assistants-are-supported","text":"Any AI assistant that supports the MCP protocol: - Claude Desktop - Custom GPT implementations - Any MCP-compatible client","title":"Which AI assistants are supported?"},{"location":"FAQ/#can-ai-assistants-execute-commands-directly","text":"No, AI assistants can only: - Parse comments - Analyze PRs - Suggest commands - Generate reports Actual command execution requires a human to post the command in a GitHub comment.","title":"Can AI assistants execute commands directly?"},{"location":"FAQ/#deployment-questions","text":"","title":"Deployment Questions"},{"location":"FAQ/#how-do-i-deploy-to-production","text":"See DEPLOYMENT.md for complete instructions. Quick summary: 1. Set up a server with Docker 2. Configure domain and DNS 3. Obtain SSL certificate with Let's Encrypt 4. Deploy with Docker Compose 5. Update GitHub App webhook URL","title":"How do I deploy to production?"},{"location":"FAQ/#what-are-the-server-requirements","text":"Minimum: - 1 CPU core - 512 MB RAM - 10 GB disk space - Ubuntu 20.04+ or similar Linux distribution","title":"What are the server requirements?"},{"location":"FAQ/#can-i-deploy-to-herokurailwayrender","text":"Yes! The bot works on any platform that supports: - Python 3.8+ - Persistent storage for logs - Inbound HTTPS connections","title":"Can I deploy to Heroku/Railway/Render?"},{"location":"FAQ/#how-do-i-update-the-bot","text":"cd /opt/mercur-e-bot git pull docker-compose down docker-compose build docker-compose up -d","title":"How do I update the bot?"},{"location":"FAQ/#troubleshooting-questions","text":"","title":"Troubleshooting Questions"},{"location":"FAQ/#webhook-signature-validation-fails","text":"Check webhook secret matches in GitHub App and .env Verify no extra spaces in secret Check GitHub is sending SHA-256 signature Review logs for exact error","title":"Webhook signature validation fails"},{"location":"FAQ/#installation-not-found-error","text":"Install the app on the repository Verify installation ID is correct Check app has required permissions","title":"\"Installation not found\" error"},{"location":"FAQ/#commands-execute-but-nothing-happens","text":"Check bot has required permissions Verify GitHub Actions workflows exist Review logs for errors Check API rate limits","title":"Commands execute but nothing happens"},{"location":"FAQ/#high-memory-usage","text":"Check for memory leaks in custom code Limit concurrent webhook processing Add resource limits in Docker Monitor with docker stats","title":"High memory usage"},{"location":"FAQ/#logs-are-too-large","text":"Configure log rotation in /etc/logrotate.d/mercur-e-bot : /opt/mercur-e-bot/logs/*.log { daily rotate 7 compress delaycompress notifempty }","title":"Logs are too large"},{"location":"FAQ/#performance-questions","text":"","title":"Performance Questions"},{"location":"FAQ/#how-many-requests-can-it-handle","text":"Depends on your server, but the bot can handle: - 100+ webhooks per minute - 1000+ API requests per hour (GitHub rate limit)","title":"How many requests can it handle?"},{"location":"FAQ/#can-i-scale-horizontally","text":"Yes, but you'll need: - Load balancer - Shared storage for logs - Redis for token caching (not implemented by default)","title":"Can I scale horizontally?"},{"location":"FAQ/#how-do-i-monitor-performance","text":"Check logs: tail -f logs/githubbot.log Monitor Docker: docker stats Use APM tools like Datadog, New Relic Set up health check monitoring","title":"How do I monitor performance?"},{"location":"FAQ/#advanced-questions","text":"","title":"Advanced Questions"},{"location":"FAQ/#can-i-use-this-with-github-enterprise","text":"Yes, update the GitHub API base URL in github_auth.py : Github(token, base_url=\"https://github.enterprise.com/api/v3\")","title":"Can I use this with GitHub Enterprise?"},{"location":"FAQ/#can-i-integrate-with-other-services","text":"Yes! Add integrations in commands.py or create new modules. Examples: - Slack notifications - Jira integration - Custom CI/CD systems","title":"Can I integrate with other services?"},{"location":"FAQ/#can-i-use-a-database","text":"Yes, add database support for: - Event history - User preferences - Command audit logs - Analytics","title":"Can I use a database?"},{"location":"FAQ/#how-do-i-contribute","text":"Fork the repository Create a feature branch Make your changes Add tests Submit a pull request","title":"How do I contribute?"},{"location":"FAQ/#support-questions","text":"","title":"Support Questions"},{"location":"FAQ/#where-can-i-get-help","text":"Check this FAQ Review README.md and other documentation Check logs for error messages Search GitHub issues Create a new issue with details","title":"Where can I get help?"},{"location":"FAQ/#how-do-i-report-a-bug","text":"Create a GitHub issue with: - Description of the problem - Steps to reproduce - Expected vs actual behavior - Log excerpts (remove sensitive data) - Environment details (OS, Python version, etc.)","title":"How do I report a bug?"},{"location":"FAQ/#can-i-request-features","text":"Yes! Create a GitHub issue with: - Feature description - Use case - Expected behavior - Any relevant examples Still have questions? Check the documentation or create an issue!","title":"Can I request features?"},{"location":"QUICKSTART/","text":"\u26a1 Quick Start Guide - MERCUR-E GitHub Bot Get your GitHub bot running in 5 minutes! \ud83c\udfaf Prerequisites Python 3.8+ GitHub App created (name: MERCUR-E) Private key downloaded from GitHub App \ud83d\ude80 5-Minute Setup Step 1: Setup Environment (1 min) cd githubbot chmod +x setup.sh ./setup.sh Step 2: Configure (2 min) # Edit .env file nano .env Add your credentials: GITHUB_APP_ID=123456 GITHUB_WEBHOOK_SECRET=your_secret_here Step 3: Add Private Key (30 sec) # Copy your downloaded private key cp ~/Downloads/your-app.2024-10-26.private-key.pem ./private-key.pem chmod 600 private-key.pem Step 4: Run Locally (30 sec) chmod +x run_local.sh ./run_local.sh Bot is now running on http://localhost:8000 ! Step 5: Expose with ngrok (1 min) In a new terminal: # Install ngrok from https://ngrok.com/download ngrok http 8000 Copy the HTTPS URL (e.g., https://abc123.ngrok.io ) Step 6: Update GitHub App Go to: https://github.com/settings/apps/MERCUR-E Update Webhook URL: https://abc123.ngrok.io/webhook Save \u2705 Test It! Install the app on a test repository Create an issue or PR Comment: /test Watch the bot respond! \ud83c\udf89 \ud83d\udcdd Available Commands /test [workflow] - Trigger GitHub Actions /merge [method] - Merge PR (squash/merge/rebase) /report - Generate status report \ud83c\udd98 Troubleshooting Bot not responding? - Check ngrok is running - Verify webhook URL in GitHub App settings - Check logs: tail -f logs/githubbot.log Authentication errors? - Verify GITHUB_APP_ID is correct - Check private-key.pem exists - Ensure app is installed on repository \ud83d\udcda Next Steps Read README.md for full documentation See DEPLOYMENT.md for production setup Check TESTING.md for testing guide Need help? Check the logs or create an issue!","title":"\u26a1 Quick Start Guide - MERCUR-E GitHub Bot"},{"location":"QUICKSTART/#quick-start-guide-mercur-e-github-bot","text":"Get your GitHub bot running in 5 minutes!","title":"\u26a1 Quick Start Guide - MERCUR-E GitHub Bot"},{"location":"QUICKSTART/#prerequisites","text":"Python 3.8+ GitHub App created (name: MERCUR-E) Private key downloaded from GitHub App","title":"\ud83c\udfaf Prerequisites"},{"location":"QUICKSTART/#5-minute-setup","text":"","title":"\ud83d\ude80 5-Minute Setup"},{"location":"QUICKSTART/#step-1-setup-environment-1-min","text":"cd githubbot chmod +x setup.sh ./setup.sh","title":"Step 1: Setup Environment (1 min)"},{"location":"QUICKSTART/#step-2-configure-2-min","text":"# Edit .env file nano .env Add your credentials: GITHUB_APP_ID=123456 GITHUB_WEBHOOK_SECRET=your_secret_here","title":"Step 2: Configure (2 min)"},{"location":"QUICKSTART/#step-3-add-private-key-30-sec","text":"# Copy your downloaded private key cp ~/Downloads/your-app.2024-10-26.private-key.pem ./private-key.pem chmod 600 private-key.pem","title":"Step 3: Add Private Key (30 sec)"},{"location":"QUICKSTART/#step-4-run-locally-30-sec","text":"chmod +x run_local.sh ./run_local.sh Bot is now running on http://localhost:8000 !","title":"Step 4: Run Locally (30 sec)"},{"location":"QUICKSTART/#step-5-expose-with-ngrok-1-min","text":"In a new terminal: # Install ngrok from https://ngrok.com/download ngrok http 8000 Copy the HTTPS URL (e.g., https://abc123.ngrok.io )","title":"Step 5: Expose with ngrok (1 min)"},{"location":"QUICKSTART/#step-6-update-github-app","text":"Go to: https://github.com/settings/apps/MERCUR-E Update Webhook URL: https://abc123.ngrok.io/webhook Save","title":"Step 6: Update GitHub App"},{"location":"QUICKSTART/#test-it","text":"Install the app on a test repository Create an issue or PR Comment: /test Watch the bot respond! \ud83c\udf89","title":"\u2705 Test It!"},{"location":"QUICKSTART/#available-commands","text":"/test [workflow] - Trigger GitHub Actions /merge [method] - Merge PR (squash/merge/rebase) /report - Generate status report","title":"\ud83d\udcdd Available Commands"},{"location":"QUICKSTART/#troubleshooting","text":"Bot not responding? - Check ngrok is running - Verify webhook URL in GitHub App settings - Check logs: tail -f logs/githubbot.log Authentication errors? - Verify GITHUB_APP_ID is correct - Check private-key.pem exists - Ensure app is installed on repository","title":"\ud83c\udd98 Troubleshooting"},{"location":"QUICKSTART/#next-steps","text":"Read README.md for full documentation See DEPLOYMENT.md for production setup Check TESTING.md for testing guide Need help? Check the logs or create an issue!","title":"\ud83d\udcda Next Steps"},{"location":"TESTING/","text":"\ud83e\uddea Testing Guide for MERCUR-E GitHub Bot Local Testing with ngrok 1. Install ngrok # Download from https://ngrok.com/download # Or use snap: sudo snap install ngrok 2. Start the Bot # Terminal 1: Start the bot ./run_local.sh 3. Expose with ngrok # Terminal 2: Start ngrok ngrok http 8000 You'll see output like: Forwarding https://abc123.ngrok.io -> http://localhost:8000 4. Update GitHub App Webhook Go to your GitHub App settings Update Webhook URL to: https://abc123.ngrok.io/webhook Save changes 5. Test Commands Create a test repository and install your GitHub App on it. Test /test Command Create a pull request or issue Add a comment: /test Check ngrok terminal for incoming webhook Check bot logs for processing Test /merge Command Create a pull request Ensure CI passes (if you have workflows) Add comment: /merge squash PR should be merged Test /report Command On any PR or issue Add comment: /report Bot should post a detailed report Testing with Cloudflare Tunnel (Alternative to ngrok) 1. Install Cloudflare Tunnel # Download cloudflared wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb sudo dpkg -i cloudflared-linux-amd64.deb 2. Authenticate cloudflared tunnel login 3. Create Tunnel cloudflared tunnel create mercur-e-bot 4. Configure Tunnel Create ~/.cloudflared/config.yml : tunnel: mercur-e-bot credentials-file: /home/user/.cloudflared/<tunnel-id>.json ingress: - hostname: bot.yourdomain.com service: http://localhost:8000 - service: http_status:404 5. Run Tunnel cloudflared tunnel run mercur-e-bot Manual API Testing Health Check curl http://localhost:8000/health Expected response: { \"status\": \"healthy\", \"github_app_id\": 123456, \"fastmcp_enabled\": true, \"pam_enabled\": false } Parse Comment API curl -X POST http://localhost:8000/api/parse-comment \\ -H \"Content-Type: application/json\" \\ -d '{ \"comment\": \"/test ci.yml\\n/merge squash\\n/report\" }' Expected response: { \"success\": true, \"commands\": [ {\"command\": \"test\", \"args\": \"ci.yml\"}, {\"command\": \"merge\", \"args\": \"squash\"}, {\"command\": \"report\", \"args\": \"\"} ], \"count\": 3 } Status API curl http://localhost:8000/api/status Testing Webhook Signature Validation Generate Test Signature import hmac import hashlib payload = b'{\"action\": \"created\"}' secret = b'your_webhook_secret' signature = 'sha256=' + hmac.new(secret, payload, hashlib.sha256).hexdigest() print(signature) Send Test Webhook curl -X POST http://localhost:8000/webhook \\ -H \"Content-Type: application/json\" \\ -H \"X-GitHub-Event: ping\" \\ -H \"X-Hub-Signature-256: sha256=<calculated_signature>\" \\ -d '{\"action\": \"created\"}' Testing FastMCP Integration 1. Start MCP Server # Terminal 3 ./run_mcp.sh 2. Test MCP Tools # Install MCP client (if needed) pip install mcp # Test parse command curl -X POST http://localhost:8001/tools/parse_github_comment \\ -H \"Content-Type: application/json\" \\ -d '{ \"comment_text\": \"/test workflow.yml\" }' 3. Test with AI Assistant Configure your AI assistant to use MCP server at http://localhost:8001 Example prompts: - \"Parse this GitHub comment: /test ci.yml\" - \"Analyze pull request #123 in owner/repo\" - \"Suggest a command for merging a PR with passing CI\" Integration Testing Test Full Workflow Create Test Repository Create a new repository Install your GitHub App Add a simple workflow file Create Pull Request bash git checkout -b test-branch echo \"test\" > test.txt git add test.txt git commit -m \"Test commit\" git push origin test-branch Test Commands Comment /test - should trigger workflow Comment /report - should post status Comment /merge squash - should merge PR Verify Results Check GitHub Actions for triggered workflow Check PR comments for bot responses Check PR merge status Debugging Enable Debug Logging Edit .env : DEBUG=True LOG_LEVEL=DEBUG Restart the bot. View Detailed Logs # Real-time logs tail -f logs/githubbot.log # Search for errors grep ERROR logs/githubbot.log # Search for specific event grep \"issue_comment\" logs/githubbot.log Check GitHub Webhook Deliveries Go to GitHub App settings Click \"Advanced\" \u2192 \"Recent Deliveries\" View request/response for each webhook Redeliver failed webhooks Common Issues Webhook signature validation fails Check GITHUB_WEBHOOK_SECRET matches GitHub App settings Verify webhook is using SHA-256 signature Check for trailing whitespace in secret Commands not executing Verify bot has correct permissions Check installation on repository Review command syntax (must start with / ) Authentication errors Verify GITHUB_APP_ID is correct Check private-key.pem is valid Ensure app is installed on repository Performance Testing Load Testing with Apache Bench # Install Apache Bench sudo apt install apache2-utils # Test health endpoint ab -n 1000 -c 10 http://localhost:8000/health # Results show requests/second, latency, etc. Stress Testing # Install wrk sudo apt install wrk # Run stress test wrk -t12 -c400 -d30s http://localhost:8000/health Security Testing Test Webhook Signature Bypass Try sending webhook without signature: curl -X POST http://localhost:8000/webhook \\ -H \"Content-Type: application/json\" \\ -H \"X-GitHub-Event: ping\" \\ -d '{\"action\": \"created\"}' Should return 401 Unauthorized. Test Invalid Signature curl -X POST http://localhost:8000/webhook \\ -H \"Content-Type: application/json\" \\ -H \"X-GitHub-Event: ping\" \\ -H \"X-Hub-Signature-256: sha256=invalid\" \\ -d '{\"action\": \"created\"}' Should return 401 Unauthorized. Test HTTPS Redirect # Should redirect to HTTPS curl -I http://bot.yourdomain.com Automated Testing (Future) Unit Tests Create tests/test_commands.py : import pytest from commands import CommandParser def test_parse_single_command(): text = \"/test ci.yml\" commands = CommandParser.parse_commands(text) assert len(commands) == 1 assert commands[0]['command'] == 'test' assert commands[0]['args'] == 'ci.yml' def test_parse_multiple_commands(): text = \"/test\\n/merge squash\\n/report\" commands = CommandParser.parse_commands(text) assert len(commands) == 3 Run tests: pytest tests/ -v Monitoring in Production Set Up Health Check Monitoring Use services like: - UptimeRobot - Pingdom - StatusCake Monitor: https://bot.yourdomain.com/health Log Monitoring Use tools like: - Grafana + Loki - ELK Stack - Datadog Metrics Track: - Webhook processing time - Command execution success rate - API response times - Error rates Happy Testing! \ud83e\uddea","title":"\ud83e\uddea Testing Guide for MERCUR-E GitHub Bot"},{"location":"TESTING/#testing-guide-for-mercur-e-github-bot","text":"","title":"\ud83e\uddea Testing Guide for MERCUR-E GitHub Bot"},{"location":"TESTING/#local-testing-with-ngrok","text":"","title":"Local Testing with ngrok"},{"location":"TESTING/#1-install-ngrok","text":"# Download from https://ngrok.com/download # Or use snap: sudo snap install ngrok","title":"1. Install ngrok"},{"location":"TESTING/#2-start-the-bot","text":"# Terminal 1: Start the bot ./run_local.sh","title":"2. Start the Bot"},{"location":"TESTING/#3-expose-with-ngrok","text":"# Terminal 2: Start ngrok ngrok http 8000 You'll see output like: Forwarding https://abc123.ngrok.io -> http://localhost:8000","title":"3. Expose with ngrok"},{"location":"TESTING/#4-update-github-app-webhook","text":"Go to your GitHub App settings Update Webhook URL to: https://abc123.ngrok.io/webhook Save changes","title":"4. Update GitHub App Webhook"},{"location":"TESTING/#5-test-commands","text":"Create a test repository and install your GitHub App on it.","title":"5. Test Commands"},{"location":"TESTING/#test-test-command","text":"Create a pull request or issue Add a comment: /test Check ngrok terminal for incoming webhook Check bot logs for processing","title":"Test /test Command"},{"location":"TESTING/#test-merge-command","text":"Create a pull request Ensure CI passes (if you have workflows) Add comment: /merge squash PR should be merged","title":"Test /merge Command"},{"location":"TESTING/#test-report-command","text":"On any PR or issue Add comment: /report Bot should post a detailed report","title":"Test /report Command"},{"location":"TESTING/#testing-with-cloudflare-tunnel-alternative-to-ngrok","text":"","title":"Testing with Cloudflare Tunnel (Alternative to ngrok)"},{"location":"TESTING/#1-install-cloudflare-tunnel","text":"# Download cloudflared wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb sudo dpkg -i cloudflared-linux-amd64.deb","title":"1. Install Cloudflare Tunnel"},{"location":"TESTING/#2-authenticate","text":"cloudflared tunnel login","title":"2. Authenticate"},{"location":"TESTING/#3-create-tunnel","text":"cloudflared tunnel create mercur-e-bot","title":"3. Create Tunnel"},{"location":"TESTING/#4-configure-tunnel","text":"Create ~/.cloudflared/config.yml : tunnel: mercur-e-bot credentials-file: /home/user/.cloudflared/<tunnel-id>.json ingress: - hostname: bot.yourdomain.com service: http://localhost:8000 - service: http_status:404","title":"4. Configure Tunnel"},{"location":"TESTING/#5-run-tunnel","text":"cloudflared tunnel run mercur-e-bot","title":"5. Run Tunnel"},{"location":"TESTING/#manual-api-testing","text":"","title":"Manual API Testing"},{"location":"TESTING/#health-check","text":"curl http://localhost:8000/health Expected response: { \"status\": \"healthy\", \"github_app_id\": 123456, \"fastmcp_enabled\": true, \"pam_enabled\": false }","title":"Health Check"},{"location":"TESTING/#parse-comment-api","text":"curl -X POST http://localhost:8000/api/parse-comment \\ -H \"Content-Type: application/json\" \\ -d '{ \"comment\": \"/test ci.yml\\n/merge squash\\n/report\" }' Expected response: { \"success\": true, \"commands\": [ {\"command\": \"test\", \"args\": \"ci.yml\"}, {\"command\": \"merge\", \"args\": \"squash\"}, {\"command\": \"report\", \"args\": \"\"} ], \"count\": 3 }","title":"Parse Comment API"},{"location":"TESTING/#status-api","text":"curl http://localhost:8000/api/status","title":"Status API"},{"location":"TESTING/#testing-webhook-signature-validation","text":"","title":"Testing Webhook Signature Validation"},{"location":"TESTING/#generate-test-signature","text":"import hmac import hashlib payload = b'{\"action\": \"created\"}' secret = b'your_webhook_secret' signature = 'sha256=' + hmac.new(secret, payload, hashlib.sha256).hexdigest() print(signature)","title":"Generate Test Signature"},{"location":"TESTING/#send-test-webhook","text":"curl -X POST http://localhost:8000/webhook \\ -H \"Content-Type: application/json\" \\ -H \"X-GitHub-Event: ping\" \\ -H \"X-Hub-Signature-256: sha256=<calculated_signature>\" \\ -d '{\"action\": \"created\"}'","title":"Send Test Webhook"},{"location":"TESTING/#testing-fastmcp-integration","text":"","title":"Testing FastMCP Integration"},{"location":"TESTING/#1-start-mcp-server","text":"# Terminal 3 ./run_mcp.sh","title":"1. Start MCP Server"},{"location":"TESTING/#2-test-mcp-tools","text":"# Install MCP client (if needed) pip install mcp # Test parse command curl -X POST http://localhost:8001/tools/parse_github_comment \\ -H \"Content-Type: application/json\" \\ -d '{ \"comment_text\": \"/test workflow.yml\" }'","title":"2. Test MCP Tools"},{"location":"TESTING/#3-test-with-ai-assistant","text":"Configure your AI assistant to use MCP server at http://localhost:8001 Example prompts: - \"Parse this GitHub comment: /test ci.yml\" - \"Analyze pull request #123 in owner/repo\" - \"Suggest a command for merging a PR with passing CI\"","title":"3. Test with AI Assistant"},{"location":"TESTING/#integration-testing","text":"","title":"Integration Testing"},{"location":"TESTING/#test-full-workflow","text":"Create Test Repository Create a new repository Install your GitHub App Add a simple workflow file Create Pull Request bash git checkout -b test-branch echo \"test\" > test.txt git add test.txt git commit -m \"Test commit\" git push origin test-branch Test Commands Comment /test - should trigger workflow Comment /report - should post status Comment /merge squash - should merge PR Verify Results Check GitHub Actions for triggered workflow Check PR comments for bot responses Check PR merge status","title":"Test Full Workflow"},{"location":"TESTING/#debugging","text":"","title":"Debugging"},{"location":"TESTING/#enable-debug-logging","text":"Edit .env : DEBUG=True LOG_LEVEL=DEBUG Restart the bot.","title":"Enable Debug Logging"},{"location":"TESTING/#view-detailed-logs","text":"# Real-time logs tail -f logs/githubbot.log # Search for errors grep ERROR logs/githubbot.log # Search for specific event grep \"issue_comment\" logs/githubbot.log","title":"View Detailed Logs"},{"location":"TESTING/#check-github-webhook-deliveries","text":"Go to GitHub App settings Click \"Advanced\" \u2192 \"Recent Deliveries\" View request/response for each webhook Redeliver failed webhooks","title":"Check GitHub Webhook Deliveries"},{"location":"TESTING/#common-issues","text":"","title":"Common Issues"},{"location":"TESTING/#webhook-signature-validation-fails","text":"Check GITHUB_WEBHOOK_SECRET matches GitHub App settings Verify webhook is using SHA-256 signature Check for trailing whitespace in secret","title":"Webhook signature validation fails"},{"location":"TESTING/#commands-not-executing","text":"Verify bot has correct permissions Check installation on repository Review command syntax (must start with / )","title":"Commands not executing"},{"location":"TESTING/#authentication-errors","text":"Verify GITHUB_APP_ID is correct Check private-key.pem is valid Ensure app is installed on repository","title":"Authentication errors"},{"location":"TESTING/#performance-testing","text":"","title":"Performance Testing"},{"location":"TESTING/#load-testing-with-apache-bench","text":"# Install Apache Bench sudo apt install apache2-utils # Test health endpoint ab -n 1000 -c 10 http://localhost:8000/health # Results show requests/second, latency, etc.","title":"Load Testing with Apache Bench"},{"location":"TESTING/#stress-testing","text":"# Install wrk sudo apt install wrk # Run stress test wrk -t12 -c400 -d30s http://localhost:8000/health","title":"Stress Testing"},{"location":"TESTING/#security-testing","text":"","title":"Security Testing"},{"location":"TESTING/#test-webhook-signature-bypass","text":"Try sending webhook without signature: curl -X POST http://localhost:8000/webhook \\ -H \"Content-Type: application/json\" \\ -H \"X-GitHub-Event: ping\" \\ -d '{\"action\": \"created\"}' Should return 401 Unauthorized.","title":"Test Webhook Signature Bypass"},{"location":"TESTING/#test-invalid-signature","text":"curl -X POST http://localhost:8000/webhook \\ -H \"Content-Type: application/json\" \\ -H \"X-GitHub-Event: ping\" \\ -H \"X-Hub-Signature-256: sha256=invalid\" \\ -d '{\"action\": \"created\"}' Should return 401 Unauthorized.","title":"Test Invalid Signature"},{"location":"TESTING/#test-https-redirect","text":"# Should redirect to HTTPS curl -I http://bot.yourdomain.com","title":"Test HTTPS Redirect"},{"location":"TESTING/#automated-testing-future","text":"","title":"Automated Testing (Future)"},{"location":"TESTING/#unit-tests","text":"Create tests/test_commands.py : import pytest from commands import CommandParser def test_parse_single_command(): text = \"/test ci.yml\" commands = CommandParser.parse_commands(text) assert len(commands) == 1 assert commands[0]['command'] == 'test' assert commands[0]['args'] == 'ci.yml' def test_parse_multiple_commands(): text = \"/test\\n/merge squash\\n/report\" commands = CommandParser.parse_commands(text) assert len(commands) == 3 Run tests: pytest tests/ -v","title":"Unit Tests"},{"location":"TESTING/#monitoring-in-production","text":"","title":"Monitoring in Production"},{"location":"TESTING/#set-up-health-check-monitoring","text":"Use services like: - UptimeRobot - Pingdom - StatusCake Monitor: https://bot.yourdomain.com/health","title":"Set Up Health Check Monitoring"},{"location":"TESTING/#log-monitoring","text":"Use tools like: - Grafana + Loki - ELK Stack - Datadog","title":"Log Monitoring"},{"location":"TESTING/#metrics","text":"Track: - Webhook processing time - Command execution success rate - API response times - Error rates Happy Testing! \ud83e\uddea","title":"Metrics"}]}